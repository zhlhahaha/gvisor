// automatically generated by stateify.

package ramfs

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *Dir) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.Dir"
}

func (x *Dir) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"InodeSimpleExtendedAttributes",
		"children",
		"dentryMap",
	}
}

func (x *Dir) beforeSave() {}

func (x *Dir) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeSimpleAttributes)
	m.Save(1, &x.InodeSimpleExtendedAttributes)
	m.Save(2, &x.children)
	m.Save(3, &x.dentryMap)
}

func (x *Dir) afterLoad() {}

func (x *Dir) StateLoad(m state.Source) {
	m.Load(0, &x.InodeSimpleAttributes)
	m.Load(1, &x.InodeSimpleExtendedAttributes)
	m.Load(2, &x.children)
	m.Load(3, &x.dentryMap)
}

func (x *dirFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.dirFileOperations"
}

func (x *dirFileOperations) StateFields() []string {
	return []string{
		"dirCursor",
		"dir",
	}
}

func (x *dirFileOperations) beforeSave() {}

func (x *dirFileOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.dirCursor)
	m.Save(1, &x.dir)
}

func (x *dirFileOperations) afterLoad() {}

func (x *dirFileOperations) StateLoad(m state.Source) {
	m.Load(0, &x.dirCursor)
	m.Load(1, &x.dir)
}

func (x *Socket) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.Socket"
}

func (x *Socket) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"InodeSimpleExtendedAttributes",
		"ep",
	}
}

func (x *Socket) beforeSave() {}

func (x *Socket) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeSimpleAttributes)
	m.Save(1, &x.InodeSimpleExtendedAttributes)
	m.Save(2, &x.ep)
}

func (x *Socket) afterLoad() {}

func (x *Socket) StateLoad(m state.Source) {
	m.Load(0, &x.InodeSimpleAttributes)
	m.Load(1, &x.InodeSimpleExtendedAttributes)
	m.Load(2, &x.ep)
}

func (x *socketFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.socketFileOperations"
}

func (x *socketFileOperations) StateFields() []string {
	return []string{}
}

func (x *socketFileOperations) beforeSave() {}

func (x *socketFileOperations) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *socketFileOperations) afterLoad() {}

func (x *socketFileOperations) StateLoad(m state.Source) {
}

func (x *Symlink) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.Symlink"
}

func (x *Symlink) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"InodeSimpleExtendedAttributes",
		"Target",
	}
}

func (x *Symlink) beforeSave() {}

func (x *Symlink) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeSimpleAttributes)
	m.Save(1, &x.InodeSimpleExtendedAttributes)
	m.Save(2, &x.Target)
}

func (x *Symlink) afterLoad() {}

func (x *Symlink) StateLoad(m state.Source) {
	m.Load(0, &x.InodeSimpleAttributes)
	m.Load(1, &x.InodeSimpleExtendedAttributes)
	m.Load(2, &x.Target)
}

func (x *symlinkFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.symlinkFileOperations"
}

func (x *symlinkFileOperations) StateFields() []string {
	return []string{}
}

func (x *symlinkFileOperations) beforeSave() {}

func (x *symlinkFileOperations) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *symlinkFileOperations) afterLoad() {}

func (x *symlinkFileOperations) StateLoad(m state.Source) {
}

func init() {
	state.Register((*Dir)(nil))
	state.Register((*dirFileOperations)(nil))
	state.Register((*Socket)(nil))
	state.Register((*socketFileOperations)(nil))
	state.Register((*Symlink)(nil))
	state.Register((*symlinkFileOperations)(nil))
}
