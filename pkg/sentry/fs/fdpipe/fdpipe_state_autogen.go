// automatically generated by stateify.

package fdpipe

import (
	"gvisor.dev/gvisor/pkg/sentry/fs"
	"gvisor.dev/gvisor/pkg/state"
)

func (x *pipeOperations) StateTypeName() string {
	return "pkg/sentry/fs/fdpipe.pipeOperations"
}

func (x *pipeOperations) StateFields() []string {
	return []string{
		"flags",
		"opener",
		"readAheadBuffer",
	}
}

func (x *pipeOperations) StateSave(m state.Sink) {
	x.beforeSave()
	var flags fs.FileFlags = x.saveFlags()
	m.SaveValue(0, flags)
	m.Save(1, &x.opener)
	m.Save(2, &x.readAheadBuffer)
}

func (x *pipeOperations) StateLoad(m state.Source) {
	m.LoadWait(1, &x.opener)
	m.Load(2, &x.readAheadBuffer)
	m.LoadValue(0, new(fs.FileFlags), func(y interface{}) { x.loadFlags(y.(fs.FileFlags)) })
	m.AfterLoad(x.afterLoad)
}

func init() {
	state.Register((*pipeOperations)(nil))
}
