// automatically generated by stateify.

package proc

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *execArgInode) StateTypeName() string {
	return "pkg/sentry/fs/proc.execArgInode"
}

func (x *execArgInode) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"arg",
		"t",
	}
}

func (x *execArgInode) beforeSave() {}

func (x *execArgInode) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.arg)
	m.Save(2, &x.t)
}

func (x *execArgInode) afterLoad() {}

func (x *execArgInode) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.Load(1, &x.arg)
	m.Load(2, &x.t)
}

func (x *execArgFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.execArgFile"
}

func (x *execArgFile) StateFields() []string {
	return []string{
		"arg",
		"t",
	}
}

func (x *execArgFile) beforeSave() {}

func (x *execArgFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.arg)
	m.Save(1, &x.t)
}

func (x *execArgFile) afterLoad() {}

func (x *execArgFile) StateLoad(m state.Source) {
	m.Load(0, &x.arg)
	m.Load(1, &x.t)
}

func (x *fdDir) StateTypeName() string {
	return "pkg/sentry/fs/proc.fdDir"
}

func (x *fdDir) StateFields() []string {
	return []string{
		"Dir",
		"t",
	}
}

func (x *fdDir) beforeSave() {}

func (x *fdDir) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Dir)
	m.Save(1, &x.t)
}

func (x *fdDir) afterLoad() {}

func (x *fdDir) StateLoad(m state.Source) {
	m.Load(0, &x.Dir)
	m.Load(1, &x.t)
}

func (x *fdDirFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.fdDirFile"
}

func (x *fdDirFile) StateFields() []string {
	return []string{
		"isInfoFile",
		"t",
	}
}

func (x *fdDirFile) beforeSave() {}

func (x *fdDirFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.isInfoFile)
	m.Save(1, &x.t)
}

func (x *fdDirFile) afterLoad() {}

func (x *fdDirFile) StateLoad(m state.Source) {
	m.Load(0, &x.isInfoFile)
	m.Load(1, &x.t)
}

func (x *fdInfoDir) StateTypeName() string {
	return "pkg/sentry/fs/proc.fdInfoDir"
}

func (x *fdInfoDir) StateFields() []string {
	return []string{
		"Dir",
		"t",
	}
}

func (x *fdInfoDir) beforeSave() {}

func (x *fdInfoDir) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Dir)
	m.Save(1, &x.t)
}

func (x *fdInfoDir) afterLoad() {}

func (x *fdInfoDir) StateLoad(m state.Source) {
	m.Load(0, &x.Dir)
	m.Load(1, &x.t)
}

func (x *filesystemsData) StateTypeName() string {
	return "pkg/sentry/fs/proc.filesystemsData"
}

func (x *filesystemsData) StateFields() []string {
	return []string{}
}

func (x *filesystemsData) beforeSave() {}

func (x *filesystemsData) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *filesystemsData) afterLoad() {}

func (x *filesystemsData) StateLoad(m state.Source) {
}

func (x *filesystem) StateTypeName() string {
	return "pkg/sentry/fs/proc.filesystem"
}

func (x *filesystem) StateFields() []string {
	return []string{}
}

func (x *filesystem) beforeSave() {}

func (x *filesystem) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *filesystem) afterLoad() {}

func (x *filesystem) StateLoad(m state.Source) {
}

func (x *taskOwnedInodeOps) StateTypeName() string {
	return "pkg/sentry/fs/proc.taskOwnedInodeOps"
}

func (x *taskOwnedInodeOps) StateFields() []string {
	return []string{
		"InodeOperations",
		"t",
	}
}

func (x *taskOwnedInodeOps) beforeSave() {}

func (x *taskOwnedInodeOps) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeOperations)
	m.Save(1, &x.t)
}

func (x *taskOwnedInodeOps) afterLoad() {}

func (x *taskOwnedInodeOps) StateLoad(m state.Source) {
	m.Load(0, &x.InodeOperations)
	m.Load(1, &x.t)
}

func (x *staticFileInodeOps) StateTypeName() string {
	return "pkg/sentry/fs/proc.staticFileInodeOps"
}

func (x *staticFileInodeOps) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"InodeStaticFileGetter",
	}
}

func (x *staticFileInodeOps) beforeSave() {}

func (x *staticFileInodeOps) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeSimpleAttributes)
	m.Save(1, &x.InodeStaticFileGetter)
}

func (x *staticFileInodeOps) afterLoad() {}

func (x *staticFileInodeOps) StateLoad(m state.Source) {
	m.Load(0, &x.InodeSimpleAttributes)
	m.Load(1, &x.InodeStaticFileGetter)
}

func (x *loadavgData) StateTypeName() string {
	return "pkg/sentry/fs/proc.loadavgData"
}

func (x *loadavgData) StateFields() []string {
	return []string{}
}

func (x *loadavgData) beforeSave() {}

func (x *loadavgData) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *loadavgData) afterLoad() {}

func (x *loadavgData) StateLoad(m state.Source) {
}

func (x *meminfoData) StateTypeName() string {
	return "pkg/sentry/fs/proc.meminfoData"
}

func (x *meminfoData) StateFields() []string {
	return []string{
		"k",
	}
}

func (x *meminfoData) beforeSave() {}

func (x *meminfoData) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.k)
}

func (x *meminfoData) afterLoad() {}

func (x *meminfoData) StateLoad(m state.Source) {
	m.Load(0, &x.k)
}

func (x *mountInfoFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.mountInfoFile"
}

func (x *mountInfoFile) StateFields() []string {
	return []string{
		"t",
	}
}

func (x *mountInfoFile) beforeSave() {}

func (x *mountInfoFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
}

func (x *mountInfoFile) afterLoad() {}

func (x *mountInfoFile) StateLoad(m state.Source) {
	m.Load(0, &x.t)
}

func (x *mountsFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.mountsFile"
}

func (x *mountsFile) StateFields() []string {
	return []string{
		"t",
	}
}

func (x *mountsFile) beforeSave() {}

func (x *mountsFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
}

func (x *mountsFile) afterLoad() {}

func (x *mountsFile) StateLoad(m state.Source) {
	m.Load(0, &x.t)
}

func (x *ifinet6) StateTypeName() string {
	return "pkg/sentry/fs/proc.ifinet6"
}

func (x *ifinet6) StateFields() []string {
	return []string{
		"s",
	}
}

func (x *ifinet6) beforeSave() {}

func (x *ifinet6) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.s)
}

func (x *ifinet6) afterLoad() {}

func (x *ifinet6) StateLoad(m state.Source) {
	m.Load(0, &x.s)
}

func (x *netDev) StateTypeName() string {
	return "pkg/sentry/fs/proc.netDev"
}

func (x *netDev) StateFields() []string {
	return []string{
		"s",
	}
}

func (x *netDev) beforeSave() {}

func (x *netDev) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.s)
}

func (x *netDev) afterLoad() {}

func (x *netDev) StateLoad(m state.Source) {
	m.Load(0, &x.s)
}

func (x *netSnmp) StateTypeName() string {
	return "pkg/sentry/fs/proc.netSnmp"
}

func (x *netSnmp) StateFields() []string {
	return []string{
		"s",
	}
}

func (x *netSnmp) beforeSave() {}

func (x *netSnmp) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.s)
}

func (x *netSnmp) afterLoad() {}

func (x *netSnmp) StateLoad(m state.Source) {
	m.Load(0, &x.s)
}

func (x *netRoute) StateTypeName() string {
	return "pkg/sentry/fs/proc.netRoute"
}

func (x *netRoute) StateFields() []string {
	return []string{
		"s",
	}
}

func (x *netRoute) beforeSave() {}

func (x *netRoute) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.s)
}

func (x *netRoute) afterLoad() {}

func (x *netRoute) StateLoad(m state.Source) {
	m.Load(0, &x.s)
}

func (x *netUnix) StateTypeName() string {
	return "pkg/sentry/fs/proc.netUnix"
}

func (x *netUnix) StateFields() []string {
	return []string{
		"k",
	}
}

func (x *netUnix) beforeSave() {}

func (x *netUnix) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.k)
}

func (x *netUnix) afterLoad() {}

func (x *netUnix) StateLoad(m state.Source) {
	m.Load(0, &x.k)
}

func (x *netTCP) StateTypeName() string {
	return "pkg/sentry/fs/proc.netTCP"
}

func (x *netTCP) StateFields() []string {
	return []string{
		"k",
	}
}

func (x *netTCP) beforeSave() {}

func (x *netTCP) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.k)
}

func (x *netTCP) afterLoad() {}

func (x *netTCP) StateLoad(m state.Source) {
	m.Load(0, &x.k)
}

func (x *netTCP6) StateTypeName() string {
	return "pkg/sentry/fs/proc.netTCP6"
}

func (x *netTCP6) StateFields() []string {
	return []string{
		"k",
	}
}

func (x *netTCP6) beforeSave() {}

func (x *netTCP6) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.k)
}

func (x *netTCP6) afterLoad() {}

func (x *netTCP6) StateLoad(m state.Source) {
	m.Load(0, &x.k)
}

func (x *netUDP) StateTypeName() string {
	return "pkg/sentry/fs/proc.netUDP"
}

func (x *netUDP) StateFields() []string {
	return []string{
		"k",
	}
}

func (x *netUDP) beforeSave() {}

func (x *netUDP) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.k)
}

func (x *netUDP) afterLoad() {}

func (x *netUDP) StateLoad(m state.Source) {
	m.Load(0, &x.k)
}

func (x *proc) StateTypeName() string {
	return "pkg/sentry/fs/proc.proc"
}

func (x *proc) StateFields() []string {
	return []string{
		"Dir",
		"k",
		"pidns",
		"cgroupControllers",
	}
}

func (x *proc) beforeSave() {}

func (x *proc) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Dir)
	m.Save(1, &x.k)
	m.Save(2, &x.pidns)
	m.Save(3, &x.cgroupControllers)
}

func (x *proc) afterLoad() {}

func (x *proc) StateLoad(m state.Source) {
	m.Load(0, &x.Dir)
	m.Load(1, &x.k)
	m.Load(2, &x.pidns)
	m.Load(3, &x.cgroupControllers)
}

func (x *self) StateTypeName() string {
	return "pkg/sentry/fs/proc.self"
}

func (x *self) StateFields() []string {
	return []string{
		"Symlink",
		"pidns",
	}
}

func (x *self) beforeSave() {}

func (x *self) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Symlink)
	m.Save(1, &x.pidns)
}

func (x *self) afterLoad() {}

func (x *self) StateLoad(m state.Source) {
	m.Load(0, &x.Symlink)
	m.Load(1, &x.pidns)
}

func (x *threadSelf) StateTypeName() string {
	return "pkg/sentry/fs/proc.threadSelf"
}

func (x *threadSelf) StateFields() []string {
	return []string{
		"Symlink",
		"pidns",
	}
}

func (x *threadSelf) beforeSave() {}

func (x *threadSelf) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Symlink)
	m.Save(1, &x.pidns)
}

func (x *threadSelf) afterLoad() {}

func (x *threadSelf) StateLoad(m state.Source) {
	m.Load(0, &x.Symlink)
	m.Load(1, &x.pidns)
}

func (x *rootProcFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.rootProcFile"
}

func (x *rootProcFile) StateFields() []string {
	return []string{
		"iops",
	}
}

func (x *rootProcFile) beforeSave() {}

func (x *rootProcFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.iops)
}

func (x *rootProcFile) afterLoad() {}

func (x *rootProcFile) StateLoad(m state.Source) {
	m.Load(0, &x.iops)
}

func (x *statData) StateTypeName() string {
	return "pkg/sentry/fs/proc.statData"
}

func (x *statData) StateFields() []string {
	return []string{
		"k",
	}
}

func (x *statData) beforeSave() {}

func (x *statData) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.k)
}

func (x *statData) afterLoad() {}

func (x *statData) StateLoad(m state.Source) {
	m.Load(0, &x.k)
}

func (x *mmapMinAddrData) StateTypeName() string {
	return "pkg/sentry/fs/proc.mmapMinAddrData"
}

func (x *mmapMinAddrData) StateFields() []string {
	return []string{
		"k",
	}
}

func (x *mmapMinAddrData) beforeSave() {}

func (x *mmapMinAddrData) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.k)
}

func (x *mmapMinAddrData) afterLoad() {}

func (x *mmapMinAddrData) StateLoad(m state.Source) {
	m.Load(0, &x.k)
}

func (x *overcommitMemory) StateTypeName() string {
	return "pkg/sentry/fs/proc.overcommitMemory"
}

func (x *overcommitMemory) StateFields() []string {
	return []string{}
}

func (x *overcommitMemory) beforeSave() {}

func (x *overcommitMemory) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *overcommitMemory) afterLoad() {}

func (x *overcommitMemory) StateLoad(m state.Source) {
}

func (x *hostname) StateTypeName() string {
	return "pkg/sentry/fs/proc.hostname"
}

func (x *hostname) StateFields() []string {
	return []string{
		"SimpleFileInode",
	}
}

func (x *hostname) beforeSave() {}

func (x *hostname) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
}

func (x *hostname) afterLoad() {}

func (x *hostname) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
}

func (x *hostnameFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.hostnameFile"
}

func (x *hostnameFile) StateFields() []string {
	return []string{}
}

func (x *hostnameFile) beforeSave() {}

func (x *hostnameFile) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *hostnameFile) afterLoad() {}

func (x *hostnameFile) StateLoad(m state.Source) {
}

func (x *tcpMemInode) StateTypeName() string {
	return "pkg/sentry/fs/proc.tcpMemInode"
}

func (x *tcpMemInode) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"dir",
		"s",
		"size",
	}
}

func (x *tcpMemInode) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.dir)
	m.Save(2, &x.s)
	m.Save(3, &x.size)
}

func (x *tcpMemInode) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.Load(1, &x.dir)
	m.LoadWait(2, &x.s)
	m.Load(3, &x.size)
	m.AfterLoad(x.afterLoad)
}

func (x *tcpMemFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.tcpMemFile"
}

func (x *tcpMemFile) StateFields() []string {
	return []string{
		"tcpMemInode",
	}
}

func (x *tcpMemFile) beforeSave() {}

func (x *tcpMemFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.tcpMemInode)
}

func (x *tcpMemFile) afterLoad() {}

func (x *tcpMemFile) StateLoad(m state.Source) {
	m.Load(0, &x.tcpMemInode)
}

func (x *tcpSack) StateTypeName() string {
	return "pkg/sentry/fs/proc.tcpSack"
}

func (x *tcpSack) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"stack",
		"enabled",
	}
}

func (x *tcpSack) beforeSave() {}

func (x *tcpSack) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.stack)
	m.Save(2, &x.enabled)
}

func (x *tcpSack) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.LoadWait(1, &x.stack)
	m.Load(2, &x.enabled)
	m.AfterLoad(x.afterLoad)
}

func (x *tcpSackFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.tcpSackFile"
}

func (x *tcpSackFile) StateFields() []string {
	return []string{
		"tcpSack",
		"stack",
	}
}

func (x *tcpSackFile) beforeSave() {}

func (x *tcpSackFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.tcpSack)
	m.Save(1, &x.stack)
}

func (x *tcpSackFile) afterLoad() {}

func (x *tcpSackFile) StateLoad(m state.Source) {
	m.Load(0, &x.tcpSack)
	m.LoadWait(1, &x.stack)
}

func (x *tcpRecovery) StateTypeName() string {
	return "pkg/sentry/fs/proc.tcpRecovery"
}

func (x *tcpRecovery) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"stack",
		"recovery",
	}
}

func (x *tcpRecovery) beforeSave() {}

func (x *tcpRecovery) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.stack)
	m.Save(2, &x.recovery)
}

func (x *tcpRecovery) afterLoad() {}

func (x *tcpRecovery) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.LoadWait(1, &x.stack)
	m.Load(2, &x.recovery)
}

func (x *tcpRecoveryFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.tcpRecoveryFile"
}

func (x *tcpRecoveryFile) StateFields() []string {
	return []string{
		"tcpRecovery",
		"stack",
	}
}

func (x *tcpRecoveryFile) beforeSave() {}

func (x *tcpRecoveryFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.tcpRecovery)
	m.Save(1, &x.stack)
}

func (x *tcpRecoveryFile) afterLoad() {}

func (x *tcpRecoveryFile) StateLoad(m state.Source) {
	m.Load(0, &x.tcpRecovery)
	m.LoadWait(1, &x.stack)
}

func (x *ipForwarding) StateTypeName() string {
	return "pkg/sentry/fs/proc.ipForwarding"
}

func (x *ipForwarding) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"stack",
		"enabled",
	}
}

func (x *ipForwarding) beforeSave() {}

func (x *ipForwarding) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.stack)
	m.Save(2, &x.enabled)
}

func (x *ipForwarding) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.LoadWait(1, &x.stack)
	m.Load(2, &x.enabled)
	m.AfterLoad(x.afterLoad)
}

func (x *ipForwardingFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.ipForwardingFile"
}

func (x *ipForwardingFile) StateFields() []string {
	return []string{
		"ipf",
		"stack",
	}
}

func (x *ipForwardingFile) beforeSave() {}

func (x *ipForwardingFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.ipf)
	m.Save(1, &x.stack)
}

func (x *ipForwardingFile) afterLoad() {}

func (x *ipForwardingFile) StateLoad(m state.Source) {
	m.Load(0, &x.ipf)
	m.LoadWait(1, &x.stack)
}

func (x *taskDir) StateTypeName() string {
	return "pkg/sentry/fs/proc.taskDir"
}

func (x *taskDir) StateFields() []string {
	return []string{
		"Dir",
		"t",
	}
}

func (x *taskDir) beforeSave() {}

func (x *taskDir) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Dir)
	m.Save(1, &x.t)
}

func (x *taskDir) afterLoad() {}

func (x *taskDir) StateLoad(m state.Source) {
	m.Load(0, &x.Dir)
	m.Load(1, &x.t)
}

func (x *subtasks) StateTypeName() string {
	return "pkg/sentry/fs/proc.subtasks"
}

func (x *subtasks) StateFields() []string {
	return []string{
		"Dir",
		"t",
		"p",
	}
}

func (x *subtasks) beforeSave() {}

func (x *subtasks) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Dir)
	m.Save(1, &x.t)
	m.Save(2, &x.p)
}

func (x *subtasks) afterLoad() {}

func (x *subtasks) StateLoad(m state.Source) {
	m.Load(0, &x.Dir)
	m.Load(1, &x.t)
	m.Load(2, &x.p)
}

func (x *subtasksFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.subtasksFile"
}

func (x *subtasksFile) StateFields() []string {
	return []string{
		"t",
		"pidns",
	}
}

func (x *subtasksFile) beforeSave() {}

func (x *subtasksFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
	m.Save(1, &x.pidns)
}

func (x *subtasksFile) afterLoad() {}

func (x *subtasksFile) StateLoad(m state.Source) {
	m.Load(0, &x.t)
	m.Load(1, &x.pidns)
}

func (x *exe) StateTypeName() string {
	return "pkg/sentry/fs/proc.exe"
}

func (x *exe) StateFields() []string {
	return []string{
		"Symlink",
		"t",
	}
}

func (x *exe) beforeSave() {}

func (x *exe) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Symlink)
	m.Save(1, &x.t)
}

func (x *exe) afterLoad() {}

func (x *exe) StateLoad(m state.Source) {
	m.Load(0, &x.Symlink)
	m.Load(1, &x.t)
}

func (x *namespaceSymlink) StateTypeName() string {
	return "pkg/sentry/fs/proc.namespaceSymlink"
}

func (x *namespaceSymlink) StateFields() []string {
	return []string{
		"Symlink",
		"t",
	}
}

func (x *namespaceSymlink) beforeSave() {}

func (x *namespaceSymlink) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Symlink)
	m.Save(1, &x.t)
}

func (x *namespaceSymlink) afterLoad() {}

func (x *namespaceSymlink) StateLoad(m state.Source) {
	m.Load(0, &x.Symlink)
	m.Load(1, &x.t)
}

func (x *mapsData) StateTypeName() string {
	return "pkg/sentry/fs/proc.mapsData"
}

func (x *mapsData) StateFields() []string {
	return []string{
		"t",
	}
}

func (x *mapsData) beforeSave() {}

func (x *mapsData) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
}

func (x *mapsData) afterLoad() {}

func (x *mapsData) StateLoad(m state.Source) {
	m.Load(0, &x.t)
}

func (x *smapsData) StateTypeName() string {
	return "pkg/sentry/fs/proc.smapsData"
}

func (x *smapsData) StateFields() []string {
	return []string{
		"t",
	}
}

func (x *smapsData) beforeSave() {}

func (x *smapsData) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
}

func (x *smapsData) afterLoad() {}

func (x *smapsData) StateLoad(m state.Source) {
	m.Load(0, &x.t)
}

func (x *taskStatData) StateTypeName() string {
	return "pkg/sentry/fs/proc.taskStatData"
}

func (x *taskStatData) StateFields() []string {
	return []string{
		"t",
		"tgstats",
		"pidns",
	}
}

func (x *taskStatData) beforeSave() {}

func (x *taskStatData) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
	m.Save(1, &x.tgstats)
	m.Save(2, &x.pidns)
}

func (x *taskStatData) afterLoad() {}

func (x *taskStatData) StateLoad(m state.Source) {
	m.Load(0, &x.t)
	m.Load(1, &x.tgstats)
	m.Load(2, &x.pidns)
}

func (x *statmData) StateTypeName() string {
	return "pkg/sentry/fs/proc.statmData"
}

func (x *statmData) StateFields() []string {
	return []string{
		"t",
	}
}

func (x *statmData) beforeSave() {}

func (x *statmData) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
}

func (x *statmData) afterLoad() {}

func (x *statmData) StateLoad(m state.Source) {
	m.Load(0, &x.t)
}

func (x *statusData) StateTypeName() string {
	return "pkg/sentry/fs/proc.statusData"
}

func (x *statusData) StateFields() []string {
	return []string{
		"t",
		"pidns",
	}
}

func (x *statusData) beforeSave() {}

func (x *statusData) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
	m.Save(1, &x.pidns)
}

func (x *statusData) afterLoad() {}

func (x *statusData) StateLoad(m state.Source) {
	m.Load(0, &x.t)
	m.Load(1, &x.pidns)
}

func (x *ioData) StateTypeName() string {
	return "pkg/sentry/fs/proc.ioData"
}

func (x *ioData) StateFields() []string {
	return []string{
		"ioUsage",
	}
}

func (x *ioData) beforeSave() {}

func (x *ioData) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.ioUsage)
}

func (x *ioData) afterLoad() {}

func (x *ioData) StateLoad(m state.Source) {
	m.Load(0, &x.ioUsage)
}

func (x *comm) StateTypeName() string {
	return "pkg/sentry/fs/proc.comm"
}

func (x *comm) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"t",
	}
}

func (x *comm) beforeSave() {}

func (x *comm) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.t)
}

func (x *comm) afterLoad() {}

func (x *comm) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.Load(1, &x.t)
}

func (x *commFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.commFile"
}

func (x *commFile) StateFields() []string {
	return []string{
		"t",
	}
}

func (x *commFile) beforeSave() {}

func (x *commFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
}

func (x *commFile) afterLoad() {}

func (x *commFile) StateLoad(m state.Source) {
	m.Load(0, &x.t)
}

func (x *auxvec) StateTypeName() string {
	return "pkg/sentry/fs/proc.auxvec"
}

func (x *auxvec) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"t",
	}
}

func (x *auxvec) beforeSave() {}

func (x *auxvec) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.t)
}

func (x *auxvec) afterLoad() {}

func (x *auxvec) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.Load(1, &x.t)
}

func (x *auxvecFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.auxvecFile"
}

func (x *auxvecFile) StateFields() []string {
	return []string{
		"t",
	}
}

func (x *auxvecFile) beforeSave() {}

func (x *auxvecFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
}

func (x *auxvecFile) afterLoad() {}

func (x *auxvecFile) StateLoad(m state.Source) {
	m.Load(0, &x.t)
}

func (x *oomScoreAdj) StateTypeName() string {
	return "pkg/sentry/fs/proc.oomScoreAdj"
}

func (x *oomScoreAdj) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"t",
	}
}

func (x *oomScoreAdj) beforeSave() {}

func (x *oomScoreAdj) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.t)
}

func (x *oomScoreAdj) afterLoad() {}

func (x *oomScoreAdj) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.Load(1, &x.t)
}

func (x *oomScoreAdjFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.oomScoreAdjFile"
}

func (x *oomScoreAdjFile) StateFields() []string {
	return []string{
		"t",
	}
}

func (x *oomScoreAdjFile) beforeSave() {}

func (x *oomScoreAdjFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.t)
}

func (x *oomScoreAdjFile) afterLoad() {}

func (x *oomScoreAdjFile) StateLoad(m state.Source) {
	m.Load(0, &x.t)
}

func (x *idMapInodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/proc.idMapInodeOperations"
}

func (x *idMapInodeOperations) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"InodeSimpleExtendedAttributes",
		"t",
		"gids",
	}
}

func (x *idMapInodeOperations) beforeSave() {}

func (x *idMapInodeOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeSimpleAttributes)
	m.Save(1, &x.InodeSimpleExtendedAttributes)
	m.Save(2, &x.t)
	m.Save(3, &x.gids)
}

func (x *idMapInodeOperations) afterLoad() {}

func (x *idMapInodeOperations) StateLoad(m state.Source) {
	m.Load(0, &x.InodeSimpleAttributes)
	m.Load(1, &x.InodeSimpleExtendedAttributes)
	m.Load(2, &x.t)
	m.Load(3, &x.gids)
}

func (x *idMapFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/proc.idMapFileOperations"
}

func (x *idMapFileOperations) StateFields() []string {
	return []string{
		"iops",
	}
}

func (x *idMapFileOperations) beforeSave() {}

func (x *idMapFileOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.iops)
}

func (x *idMapFileOperations) afterLoad() {}

func (x *idMapFileOperations) StateLoad(m state.Source) {
	m.Load(0, &x.iops)
}

func (x *uptime) StateTypeName() string {
	return "pkg/sentry/fs/proc.uptime"
}

func (x *uptime) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"startTime",
	}
}

func (x *uptime) beforeSave() {}

func (x *uptime) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.startTime)
}

func (x *uptime) afterLoad() {}

func (x *uptime) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.Load(1, &x.startTime)
}

func (x *uptimeFile) StateTypeName() string {
	return "pkg/sentry/fs/proc.uptimeFile"
}

func (x *uptimeFile) StateFields() []string {
	return []string{
		"startTime",
	}
}

func (x *uptimeFile) beforeSave() {}

func (x *uptimeFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.startTime)
}

func (x *uptimeFile) afterLoad() {}

func (x *uptimeFile) StateLoad(m state.Source) {
	m.Load(0, &x.startTime)
}

func (x *versionData) StateTypeName() string {
	return "pkg/sentry/fs/proc.versionData"
}

func (x *versionData) StateFields() []string {
	return []string{
		"k",
	}
}

func (x *versionData) beforeSave() {}

func (x *versionData) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.k)
}

func (x *versionData) afterLoad() {}

func (x *versionData) StateLoad(m state.Source) {
	m.Load(0, &x.k)
}

func init() {
	state.Register((*execArgInode)(nil))
	state.Register((*execArgFile)(nil))
	state.Register((*fdDir)(nil))
	state.Register((*fdDirFile)(nil))
	state.Register((*fdInfoDir)(nil))
	state.Register((*filesystemsData)(nil))
	state.Register((*filesystem)(nil))
	state.Register((*taskOwnedInodeOps)(nil))
	state.Register((*staticFileInodeOps)(nil))
	state.Register((*loadavgData)(nil))
	state.Register((*meminfoData)(nil))
	state.Register((*mountInfoFile)(nil))
	state.Register((*mountsFile)(nil))
	state.Register((*ifinet6)(nil))
	state.Register((*netDev)(nil))
	state.Register((*netSnmp)(nil))
	state.Register((*netRoute)(nil))
	state.Register((*netUnix)(nil))
	state.Register((*netTCP)(nil))
	state.Register((*netTCP6)(nil))
	state.Register((*netUDP)(nil))
	state.Register((*proc)(nil))
	state.Register((*self)(nil))
	state.Register((*threadSelf)(nil))
	state.Register((*rootProcFile)(nil))
	state.Register((*statData)(nil))
	state.Register((*mmapMinAddrData)(nil))
	state.Register((*overcommitMemory)(nil))
	state.Register((*hostname)(nil))
	state.Register((*hostnameFile)(nil))
	state.Register((*tcpMemInode)(nil))
	state.Register((*tcpMemFile)(nil))
	state.Register((*tcpSack)(nil))
	state.Register((*tcpSackFile)(nil))
	state.Register((*tcpRecovery)(nil))
	state.Register((*tcpRecoveryFile)(nil))
	state.Register((*ipForwarding)(nil))
	state.Register((*ipForwardingFile)(nil))
	state.Register((*taskDir)(nil))
	state.Register((*subtasks)(nil))
	state.Register((*subtasksFile)(nil))
	state.Register((*exe)(nil))
	state.Register((*namespaceSymlink)(nil))
	state.Register((*mapsData)(nil))
	state.Register((*smapsData)(nil))
	state.Register((*taskStatData)(nil))
	state.Register((*statmData)(nil))
	state.Register((*statusData)(nil))
	state.Register((*ioData)(nil))
	state.Register((*comm)(nil))
	state.Register((*commFile)(nil))
	state.Register((*auxvec)(nil))
	state.Register((*auxvecFile)(nil))
	state.Register((*oomScoreAdj)(nil))
	state.Register((*oomScoreAdjFile)(nil))
	state.Register((*idMapInodeOperations)(nil))
	state.Register((*idMapFileOperations)(nil))
	state.Register((*uptime)(nil))
	state.Register((*uptimeFile)(nil))
	state.Register((*versionData)(nil))
}
