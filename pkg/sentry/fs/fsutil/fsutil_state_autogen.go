// automatically generated by stateify.

package fsutil

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *DirtyInfo) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.DirtyInfo"
}

func (x *DirtyInfo) StateFields() []string {
	return []string{
		"Keep",
	}
}

func (x *DirtyInfo) beforeSave() {}

func (x *DirtyInfo) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Keep)
}

func (x *DirtyInfo) afterLoad() {}

func (x *DirtyInfo) StateLoad(m state.Source) {
	m.Load(0, &x.Keep)
}

func (x *StaticDirFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.StaticDirFileOperations"
}

func (x *StaticDirFileOperations) StateFields() []string {
	return []string{
		"dentryMap",
		"dirCursor",
	}
}

func (x *StaticDirFileOperations) beforeSave() {}

func (x *StaticDirFileOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.dentryMap)
	m.Save(1, &x.dirCursor)
}

func (x *StaticDirFileOperations) afterLoad() {}

func (x *StaticDirFileOperations) StateLoad(m state.Source) {
	m.Load(0, &x.dentryMap)
	m.Load(1, &x.dirCursor)
}

func (x *NoReadWriteFile) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.NoReadWriteFile"
}

func (x *NoReadWriteFile) StateFields() []string {
	return []string{}
}

func (x *NoReadWriteFile) beforeSave() {}

func (x *NoReadWriteFile) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *NoReadWriteFile) afterLoad() {}

func (x *NoReadWriteFile) StateLoad(m state.Source) {
}

func (x *FileStaticContentReader) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.FileStaticContentReader"
}

func (x *FileStaticContentReader) StateFields() []string {
	return []string{
		"content",
	}
}

func (x *FileStaticContentReader) beforeSave() {}

func (x *FileStaticContentReader) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.content)
}

func (x *FileStaticContentReader) afterLoad() {}

func (x *FileStaticContentReader) StateLoad(m state.Source) {
	m.Load(0, &x.content)
}

func (x *HostFileMapper) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.HostFileMapper"
}

func (x *HostFileMapper) StateFields() []string {
	return []string{
		"refs",
	}
}

func (x *HostFileMapper) beforeSave() {}

func (x *HostFileMapper) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.refs)
}

func (x *HostFileMapper) StateLoad(m state.Source) {
	m.Load(0, &x.refs)
	m.AfterLoad(x.afterLoad)
}

func (x *HostMappable) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.HostMappable"
}

func (x *HostMappable) StateFields() []string {
	return []string{
		"hostFileMapper",
		"backingFile",
		"mappings",
	}
}

func (x *HostMappable) beforeSave() {}

func (x *HostMappable) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.hostFileMapper)
	m.Save(1, &x.backingFile)
	m.Save(2, &x.mappings)
}

func (x *HostMappable) afterLoad() {}

func (x *HostMappable) StateLoad(m state.Source) {
	m.Load(0, &x.hostFileMapper)
	m.Load(1, &x.backingFile)
	m.Load(2, &x.mappings)
}

func (x *SimpleFileInode) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.SimpleFileInode"
}

func (x *SimpleFileInode) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
	}
}

func (x *SimpleFileInode) beforeSave() {}

func (x *SimpleFileInode) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeSimpleAttributes)
}

func (x *SimpleFileInode) afterLoad() {}

func (x *SimpleFileInode) StateLoad(m state.Source) {
	m.Load(0, &x.InodeSimpleAttributes)
}

func (x *NoReadWriteFileInode) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.NoReadWriteFileInode"
}

func (x *NoReadWriteFileInode) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
	}
}

func (x *NoReadWriteFileInode) beforeSave() {}

func (x *NoReadWriteFileInode) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeSimpleAttributes)
}

func (x *NoReadWriteFileInode) afterLoad() {}

func (x *NoReadWriteFileInode) StateLoad(m state.Source) {
	m.Load(0, &x.InodeSimpleAttributes)
}

func (x *InodeSimpleAttributes) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.InodeSimpleAttributes"
}

func (x *InodeSimpleAttributes) StateFields() []string {
	return []string{
		"fsType",
		"unstable",
	}
}

func (x *InodeSimpleAttributes) beforeSave() {}

func (x *InodeSimpleAttributes) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.fsType)
	m.Save(1, &x.unstable)
}

func (x *InodeSimpleAttributes) afterLoad() {}

func (x *InodeSimpleAttributes) StateLoad(m state.Source) {
	m.Load(0, &x.fsType)
	m.Load(1, &x.unstable)
}

func (x *InodeSimpleExtendedAttributes) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.InodeSimpleExtendedAttributes"
}

func (x *InodeSimpleExtendedAttributes) StateFields() []string {
	return []string{
		"xattrs",
	}
}

func (x *InodeSimpleExtendedAttributes) beforeSave() {}

func (x *InodeSimpleExtendedAttributes) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.xattrs)
}

func (x *InodeSimpleExtendedAttributes) afterLoad() {}

func (x *InodeSimpleExtendedAttributes) StateLoad(m state.Source) {
	m.Load(0, &x.xattrs)
}

func (x *staticFile) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.staticFile"
}

func (x *staticFile) StateFields() []string {
	return []string{
		"FileStaticContentReader",
	}
}

func (x *staticFile) beforeSave() {}

func (x *staticFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.FileStaticContentReader)
}

func (x *staticFile) afterLoad() {}

func (x *staticFile) StateLoad(m state.Source) {
	m.Load(0, &x.FileStaticContentReader)
}

func (x *InodeStaticFileGetter) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.InodeStaticFileGetter"
}

func (x *InodeStaticFileGetter) StateFields() []string {
	return []string{
		"Contents",
	}
}

func (x *InodeStaticFileGetter) beforeSave() {}

func (x *InodeStaticFileGetter) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Contents)
}

func (x *InodeStaticFileGetter) afterLoad() {}

func (x *InodeStaticFileGetter) StateLoad(m state.Source) {
	m.Load(0, &x.Contents)
}

func (x *CachingInodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.CachingInodeOperations"
}

func (x *CachingInodeOperations) StateFields() []string {
	return []string{
		"backingFile",
		"mfp",
		"opts",
		"attr",
		"dirtyAttr",
		"mappings",
		"cache",
		"dirty",
		"hostFileMapper",
		"refs",
	}
}

func (x *CachingInodeOperations) beforeSave() {}

func (x *CachingInodeOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.backingFile)
	m.Save(1, &x.mfp)
	m.Save(2, &x.opts)
	m.Save(3, &x.attr)
	m.Save(4, &x.dirtyAttr)
	m.Save(5, &x.mappings)
	m.Save(6, &x.cache)
	m.Save(7, &x.dirty)
	m.Save(8, &x.hostFileMapper)
	m.Save(9, &x.refs)
}

func (x *CachingInodeOperations) afterLoad() {}

func (x *CachingInodeOperations) StateLoad(m state.Source) {
	m.Load(0, &x.backingFile)
	m.Load(1, &x.mfp)
	m.Load(2, &x.opts)
	m.Load(3, &x.attr)
	m.Load(4, &x.dirtyAttr)
	m.Load(5, &x.mappings)
	m.Load(6, &x.cache)
	m.Load(7, &x.dirty)
	m.Load(8, &x.hostFileMapper)
	m.Load(9, &x.refs)
}

func (x *CachingInodeOperationsOptions) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.CachingInodeOperationsOptions"
}

func (x *CachingInodeOperationsOptions) StateFields() []string {
	return []string{
		"ForcePageCache",
		"LimitHostFDTranslation",
	}
}

func (x *CachingInodeOperationsOptions) beforeSave() {}

func (x *CachingInodeOperationsOptions) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.ForcePageCache)
	m.Save(1, &x.LimitHostFDTranslation)
}

func (x *CachingInodeOperationsOptions) afterLoad() {}

func (x *CachingInodeOperationsOptions) StateLoad(m state.Source) {
	m.Load(0, &x.ForcePageCache)
	m.Load(1, &x.LimitHostFDTranslation)
}

func init() {
	state.Register((*DirtyInfo)(nil))
	state.Register((*StaticDirFileOperations)(nil))
	state.Register((*NoReadWriteFile)(nil))
	state.Register((*FileStaticContentReader)(nil))
	state.Register((*HostFileMapper)(nil))
	state.Register((*HostMappable)(nil))
	state.Register((*SimpleFileInode)(nil))
	state.Register((*NoReadWriteFileInode)(nil))
	state.Register((*InodeSimpleAttributes)(nil))
	state.Register((*InodeSimpleExtendedAttributes)(nil))
	state.Register((*staticFile)(nil))
	state.Register((*InodeStaticFileGetter)(nil))
	state.Register((*CachingInodeOperations)(nil))
	state.Register((*CachingInodeOperationsOptions)(nil))
}
