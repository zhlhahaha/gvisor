// automatically generated by stateify.

package gofer

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *fifo) StateTypeName() string {
	return "pkg/sentry/fs/gofer.fifo"
}

func (x *fifo) StateFields() []string {
	return []string{
		"InodeOperations",
		"fileIops",
	}
}

func (x *fifo) beforeSave() {}

func (x *fifo) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeOperations)
	m.Save(1, &x.fileIops)
}

func (x *fifo) afterLoad() {}

func (x *fifo) StateLoad(m state.Source) {
	m.Load(0, &x.InodeOperations)
	m.Load(1, &x.fileIops)
}

func (x *fileOperations) StateTypeName() string {
	return "pkg/sentry/fs/gofer.fileOperations"
}

func (x *fileOperations) StateFields() []string {
	return []string{
		"inodeOperations",
		"dirCursor",
		"flags",
	}
}

func (x *fileOperations) beforeSave() {}

func (x *fileOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.inodeOperations)
	m.Save(1, &x.dirCursor)
	m.Save(2, &x.flags)
}

func (x *fileOperations) StateLoad(m state.Source) {
	m.LoadWait(0, &x.inodeOperations)
	m.Load(1, &x.dirCursor)
	m.LoadWait(2, &x.flags)
	m.AfterLoad(x.afterLoad)
}

func (x *filesystem) StateTypeName() string {
	return "pkg/sentry/fs/gofer.filesystem"
}

func (x *filesystem) StateFields() []string {
	return []string{}
}

func (x *filesystem) beforeSave() {}

func (x *filesystem) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *filesystem) afterLoad() {}

func (x *filesystem) StateLoad(m state.Source) {
}

func (x *inodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/gofer.inodeOperations"
}

func (x *inodeOperations) StateFields() []string {
	return []string{
		"fileState",
		"cachingInodeOps",
	}
}

func (x *inodeOperations) beforeSave() {}

func (x *inodeOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.fileState)
	m.Save(1, &x.cachingInodeOps)
}

func (x *inodeOperations) afterLoad() {}

func (x *inodeOperations) StateLoad(m state.Source) {
	m.LoadWait(0, &x.fileState)
	m.Load(1, &x.cachingInodeOps)
}

func (x *inodeFileState) StateTypeName() string {
	return "pkg/sentry/fs/gofer.inodeFileState"
}

func (x *inodeFileState) StateFields() []string {
	return []string{
		"s",
		"sattr",
		"loading",
		"savedUAttr",
		"hostMappable",
	}
}

func (x *inodeFileState) StateSave(m state.Sink) {
	x.beforeSave()
	var loading struct{} = x.saveLoading()
	m.SaveValue(2, loading)
	m.Save(0, &x.s)
	m.Save(1, &x.sattr)
	m.Save(3, &x.savedUAttr)
	m.Save(4, &x.hostMappable)
}

func (x *inodeFileState) StateLoad(m state.Source) {
	m.LoadWait(0, &x.s)
	m.LoadWait(1, &x.sattr)
	m.Load(3, &x.savedUAttr)
	m.Load(4, &x.hostMappable)
	m.LoadValue(2, new(struct{}), func(y interface{}) { x.loadLoading(y.(struct{})) })
	m.AfterLoad(x.afterLoad)
}

func (x *overrideInfo) StateTypeName() string {
	return "pkg/sentry/fs/gofer.overrideInfo"
}

func (x *overrideInfo) StateFields() []string {
	return []string{
		"dirent",
		"endpoint",
		"inode",
	}
}

func (x *overrideInfo) beforeSave() {}

func (x *overrideInfo) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.dirent)
	m.Save(1, &x.endpoint)
	m.Save(2, &x.inode)
}

func (x *overrideInfo) afterLoad() {}

func (x *overrideInfo) StateLoad(m state.Source) {
	m.Load(0, &x.dirent)
	m.Load(1, &x.endpoint)
	m.Load(2, &x.inode)
}

func (x *overrideMaps) StateTypeName() string {
	return "pkg/sentry/fs/gofer.overrideMaps"
}

func (x *overrideMaps) StateFields() []string {
	return []string{
		"pathMap",
	}
}

func (x *overrideMaps) beforeSave() {}

func (x *overrideMaps) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.pathMap)
}

func (x *overrideMaps) afterLoad() {}

func (x *overrideMaps) StateLoad(m state.Source) {
	m.Load(0, &x.pathMap)
}

func (x *session) StateTypeName() string {
	return "pkg/sentry/fs/gofer.session"
}

func (x *session) StateFields() []string {
	return []string{
		"AtomicRefCount",
		"msize",
		"version",
		"cachePolicy",
		"aname",
		"superBlockFlags",
		"limitHostFDTranslation",
		"overlayfsStaleRead",
		"connID",
		"inodeMappings",
		"mounter",
		"overrides",
	}
}

func (x *session) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.AtomicRefCount)
	m.Save(1, &x.msize)
	m.Save(2, &x.version)
	m.Save(3, &x.cachePolicy)
	m.Save(4, &x.aname)
	m.Save(5, &x.superBlockFlags)
	m.Save(6, &x.limitHostFDTranslation)
	m.Save(7, &x.overlayfsStaleRead)
	m.Save(8, &x.connID)
	m.Save(9, &x.inodeMappings)
	m.Save(10, &x.mounter)
	m.Save(11, &x.overrides)
}

func (x *session) StateLoad(m state.Source) {
	m.Load(0, &x.AtomicRefCount)
	m.LoadWait(1, &x.msize)
	m.LoadWait(2, &x.version)
	m.LoadWait(3, &x.cachePolicy)
	m.LoadWait(4, &x.aname)
	m.LoadWait(5, &x.superBlockFlags)
	m.Load(6, &x.limitHostFDTranslation)
	m.Load(7, &x.overlayfsStaleRead)
	m.LoadWait(8, &x.connID)
	m.LoadWait(9, &x.inodeMappings)
	m.LoadWait(10, &x.mounter)
	m.LoadWait(11, &x.overrides)
	m.AfterLoad(x.afterLoad)
}

func init() {
	state.Register((*fifo)(nil))
	state.Register((*fileOperations)(nil))
	state.Register((*filesystem)(nil))
	state.Register((*inodeOperations)(nil))
	state.Register((*inodeFileState)(nil))
	state.Register((*overrideInfo)(nil))
	state.Register((*overrideMaps)(nil))
	state.Register((*session)(nil))
}
