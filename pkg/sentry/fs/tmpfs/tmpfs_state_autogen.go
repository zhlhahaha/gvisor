// automatically generated by stateify.

package tmpfs

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *regularFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/tmpfs.regularFileOperations"
}

func (x *regularFileOperations) StateFields() []string {
	return []string{
		"iops",
	}
}

func (x *regularFileOperations) beforeSave() {}

func (x *regularFileOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.iops)
}

func (x *regularFileOperations) afterLoad() {}

func (x *regularFileOperations) StateLoad(m state.Source) {
	m.Load(0, &x.iops)
}

func (x *Filesystem) StateTypeName() string {
	return "pkg/sentry/fs/tmpfs.Filesystem"
}

func (x *Filesystem) StateFields() []string {
	return []string{}
}

func (x *Filesystem) beforeSave() {}

func (x *Filesystem) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *Filesystem) afterLoad() {}

func (x *Filesystem) StateLoad(m state.Source) {
}

func (x *fileInodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/tmpfs.fileInodeOperations"
}

func (x *fileInodeOperations) StateFields() []string {
	return []string{
		"InodeSimpleExtendedAttributes",
		"kernel",
		"memUsage",
		"attr",
		"mappings",
		"writableMappingPages",
		"data",
		"seals",
	}
}

func (x *fileInodeOperations) beforeSave() {}

func (x *fileInodeOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeSimpleExtendedAttributes)
	m.Save(1, &x.kernel)
	m.Save(2, &x.memUsage)
	m.Save(3, &x.attr)
	m.Save(4, &x.mappings)
	m.Save(5, &x.writableMappingPages)
	m.Save(6, &x.data)
	m.Save(7, &x.seals)
}

func (x *fileInodeOperations) afterLoad() {}

func (x *fileInodeOperations) StateLoad(m state.Source) {
	m.Load(0, &x.InodeSimpleExtendedAttributes)
	m.Load(1, &x.kernel)
	m.Load(2, &x.memUsage)
	m.Load(3, &x.attr)
	m.Load(4, &x.mappings)
	m.Load(5, &x.writableMappingPages)
	m.Load(6, &x.data)
	m.Load(7, &x.seals)
}

func (x *Dir) StateTypeName() string {
	return "pkg/sentry/fs/tmpfs.Dir"
}

func (x *Dir) StateFields() []string {
	return []string{
		"ramfsDir",
		"kernel",
	}
}

func (x *Dir) beforeSave() {}

func (x *Dir) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.ramfsDir)
	m.Save(1, &x.kernel)
}

func (x *Dir) StateLoad(m state.Source) {
	m.Load(0, &x.ramfsDir)
	m.Load(1, &x.kernel)
	m.AfterLoad(x.afterLoad)
}

func (x *Symlink) StateTypeName() string {
	return "pkg/sentry/fs/tmpfs.Symlink"
}

func (x *Symlink) StateFields() []string {
	return []string{
		"Symlink",
	}
}

func (x *Symlink) beforeSave() {}

func (x *Symlink) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Symlink)
}

func (x *Symlink) afterLoad() {}

func (x *Symlink) StateLoad(m state.Source) {
	m.Load(0, &x.Symlink)
}

func (x *Socket) StateTypeName() string {
	return "pkg/sentry/fs/tmpfs.Socket"
}

func (x *Socket) StateFields() []string {
	return []string{
		"Socket",
	}
}

func (x *Socket) beforeSave() {}

func (x *Socket) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Socket)
}

func (x *Socket) afterLoad() {}

func (x *Socket) StateLoad(m state.Source) {
	m.Load(0, &x.Socket)
}

func (x *Fifo) StateTypeName() string {
	return "pkg/sentry/fs/tmpfs.Fifo"
}

func (x *Fifo) StateFields() []string {
	return []string{
		"InodeOperations",
	}
}

func (x *Fifo) beforeSave() {}

func (x *Fifo) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeOperations)
}

func (x *Fifo) afterLoad() {}

func (x *Fifo) StateLoad(m state.Source) {
	m.Load(0, &x.InodeOperations)
}

func init() {
	state.Register((*regularFileOperations)(nil))
	state.Register((*Filesystem)(nil))
	state.Register((*fileInodeOperations)(nil))
	state.Register((*Dir)(nil))
	state.Register((*Symlink)(nil))
	state.Register((*Socket)(nil))
	state.Register((*Fifo)(nil))
}
