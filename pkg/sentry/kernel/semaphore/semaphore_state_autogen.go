// automatically generated by stateify.

package semaphore

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (r *Registry) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.Registry"
}

func (r *Registry) StateFields() []string {
	return []string{
		"userNS",
		"semaphores",
		"lastIDUsed",
	}
}

func (r *Registry) beforeSave() {}

func (r *Registry) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.userNS)
	stateSinkObject.Save(1, &r.semaphores)
	stateSinkObject.Save(2, &r.lastIDUsed)
}

func (r *Registry) afterLoad() {}

func (r *Registry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.userNS)
	stateSourceObject.Load(1, &r.semaphores)
	stateSourceObject.Load(2, &r.lastIDUsed)
}

func (s *Set) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.Set"
}

func (s *Set) StateFields() []string {
	return []string{
		"registry",
		"ID",
		"key",
		"creator",
		"owner",
		"perms",
		"opTime",
		"changeTime",
		"sems",
		"dead",
	}
}

func (s *Set) beforeSave() {}

func (s *Set) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.registry)
	stateSinkObject.Save(1, &s.ID)
	stateSinkObject.Save(2, &s.key)
	stateSinkObject.Save(3, &s.creator)
	stateSinkObject.Save(4, &s.owner)
	stateSinkObject.Save(5, &s.perms)
	stateSinkObject.Save(6, &s.opTime)
	stateSinkObject.Save(7, &s.changeTime)
	stateSinkObject.Save(8, &s.sems)
	stateSinkObject.Save(9, &s.dead)
}

func (s *Set) afterLoad() {}

func (s *Set) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.registry)
	stateSourceObject.Load(1, &s.ID)
	stateSourceObject.Load(2, &s.key)
	stateSourceObject.Load(3, &s.creator)
	stateSourceObject.Load(4, &s.owner)
	stateSourceObject.Load(5, &s.perms)
	stateSourceObject.Load(6, &s.opTime)
	stateSourceObject.Load(7, &s.changeTime)
	stateSourceObject.Load(8, &s.sems)
	stateSourceObject.Load(9, &s.dead)
}

func (s *sem) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.sem"
}

func (s *sem) StateFields() []string {
	return []string{
		"value",
		"pid",
	}
}

func (s *sem) beforeSave() {}

func (s *sem) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	if !state.IsZeroValue(&s.waiters) {
		state.Failf("waiters is %#v, expected zero", &s.waiters)
	}
	stateSinkObject.Save(0, &s.value)
	stateSinkObject.Save(1, &s.pid)
}

func (s *sem) afterLoad() {}

func (s *sem) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.value)
	stateSourceObject.Load(1, &s.pid)
}

func (w *waiter) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.waiter"
}

func (w *waiter) StateFields() []string {
	return []string{
		"waiterEntry",
		"value",
		"ch",
	}
}

func (w *waiter) beforeSave() {}

func (w *waiter) StateSave(stateSinkObject state.Sink) {
	w.beforeSave()
	stateSinkObject.Save(0, &w.waiterEntry)
	stateSinkObject.Save(1, &w.value)
	stateSinkObject.Save(2, &w.ch)
}

func (w *waiter) afterLoad() {}

func (w *waiter) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &w.waiterEntry)
	stateSourceObject.Load(1, &w.value)
	stateSourceObject.Load(2, &w.ch)
}

func (l *waiterList) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.waiterList"
}

func (l *waiterList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (l *waiterList) beforeSave() {}

func (l *waiterList) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	stateSinkObject.Save(0, &l.head)
	stateSinkObject.Save(1, &l.tail)
}

func (l *waiterList) afterLoad() {}

func (l *waiterList) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.head)
	stateSourceObject.Load(1, &l.tail)
}

func (e *waiterEntry) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.waiterEntry"
}

func (e *waiterEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (e *waiterEntry) beforeSave() {}

func (e *waiterEntry) StateSave(stateSinkObject state.Sink) {
	e.beforeSave()
	stateSinkObject.Save(0, &e.next)
	stateSinkObject.Save(1, &e.prev)
}

func (e *waiterEntry) afterLoad() {}

func (e *waiterEntry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &e.next)
	stateSourceObject.Load(1, &e.prev)
}

func init() {
	state.Register((*Registry)(nil))
	state.Register((*Set)(nil))
	state.Register((*sem)(nil))
	state.Register((*waiter)(nil))
	state.Register((*waiterList)(nil))
	state.Register((*waiterEntry)(nil))
}
