// automatically generated by stateify.

package semaphore

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *Registry) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.Registry"
}

func (x *Registry) StateFields() []string {
	return []string{
		"userNS",
		"semaphores",
		"lastIDUsed",
	}
}

func (x *Registry) beforeSave() {}

func (x *Registry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.userNS)
	m.Save(1, &x.semaphores)
	m.Save(2, &x.lastIDUsed)
}

func (x *Registry) afterLoad() {}

func (x *Registry) StateLoad(m state.Source) {
	m.Load(0, &x.userNS)
	m.Load(1, &x.semaphores)
	m.Load(2, &x.lastIDUsed)
}

func (x *Set) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.Set"
}

func (x *Set) StateFields() []string {
	return []string{
		"registry",
		"ID",
		"key",
		"creator",
		"owner",
		"perms",
		"opTime",
		"changeTime",
		"sems",
		"dead",
	}
}

func (x *Set) beforeSave() {}

func (x *Set) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.registry)
	m.Save(1, &x.ID)
	m.Save(2, &x.key)
	m.Save(3, &x.creator)
	m.Save(4, &x.owner)
	m.Save(5, &x.perms)
	m.Save(6, &x.opTime)
	m.Save(7, &x.changeTime)
	m.Save(8, &x.sems)
	m.Save(9, &x.dead)
}

func (x *Set) afterLoad() {}

func (x *Set) StateLoad(m state.Source) {
	m.Load(0, &x.registry)
	m.Load(1, &x.ID)
	m.Load(2, &x.key)
	m.Load(3, &x.creator)
	m.Load(4, &x.owner)
	m.Load(5, &x.perms)
	m.Load(6, &x.opTime)
	m.Load(7, &x.changeTime)
	m.Load(8, &x.sems)
	m.Load(9, &x.dead)
}

func (x *sem) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.sem"
}

func (x *sem) StateFields() []string {
	return []string{
		"value",
		"pid",
	}
}

func (x *sem) beforeSave() {}

func (x *sem) StateSave(m state.Sink) {
	x.beforeSave()
	if !state.IsZeroValue(&x.waiters) {
		state.Failf("waiters is %#v, expected zero", &x.waiters)
	}
	m.Save(0, &x.value)
	m.Save(1, &x.pid)
}

func (x *sem) afterLoad() {}

func (x *sem) StateLoad(m state.Source) {
	m.Load(0, &x.value)
	m.Load(1, &x.pid)
}

func (x *waiter) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.waiter"
}

func (x *waiter) StateFields() []string {
	return []string{
		"waiterEntry",
		"value",
		"ch",
	}
}

func (x *waiter) beforeSave() {}

func (x *waiter) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.waiterEntry)
	m.Save(1, &x.value)
	m.Save(2, &x.ch)
}

func (x *waiter) afterLoad() {}

func (x *waiter) StateLoad(m state.Source) {
	m.Load(0, &x.waiterEntry)
	m.Load(1, &x.value)
	m.Load(2, &x.ch)
}

func (x *waiterList) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.waiterList"
}

func (x *waiterList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (x *waiterList) beforeSave() {}

func (x *waiterList) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.head)
	m.Save(1, &x.tail)
}

func (x *waiterList) afterLoad() {}

func (x *waiterList) StateLoad(m state.Source) {
	m.Load(0, &x.head)
	m.Load(1, &x.tail)
}

func (x *waiterEntry) StateTypeName() string {
	return "pkg/sentry/kernel/semaphore.waiterEntry"
}

func (x *waiterEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (x *waiterEntry) beforeSave() {}

func (x *waiterEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.next)
	m.Save(1, &x.prev)
}

func (x *waiterEntry) afterLoad() {}

func (x *waiterEntry) StateLoad(m state.Source) {
	m.Load(0, &x.next)
	m.Load(1, &x.prev)
}

func init() {
	state.Register((*Registry)(nil))
	state.Register((*Set)(nil))
	state.Register((*sem)(nil))
	state.Register((*waiter)(nil))
	state.Register((*waiterList)(nil))
	state.Register((*waiterEntry)(nil))
}
