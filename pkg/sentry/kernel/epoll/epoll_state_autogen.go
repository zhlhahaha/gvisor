// automatically generated by stateify.

package epoll

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *FileIdentifier) StateTypeName() string {
	return "pkg/sentry/kernel/epoll.FileIdentifier"
}

func (x *FileIdentifier) StateFields() []string {
	return []string{
		"File",
		"Fd",
	}
}

func (x *FileIdentifier) beforeSave() {}

func (x *FileIdentifier) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.File)
	m.Save(1, &x.Fd)
}

func (x *FileIdentifier) afterLoad() {}

func (x *FileIdentifier) StateLoad(m state.Source) {
	m.LoadWait(0, &x.File)
	m.Load(1, &x.Fd)
}

func (x *pollEntry) StateTypeName() string {
	return "pkg/sentry/kernel/epoll.pollEntry"
}

func (x *pollEntry) StateFields() []string {
	return []string{
		"pollEntryEntry",
		"id",
		"userData",
		"mask",
		"flags",
		"epoll",
	}
}

func (x *pollEntry) beforeSave() {}

func (x *pollEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.pollEntryEntry)
	m.Save(1, &x.id)
	m.Save(2, &x.userData)
	m.Save(3, &x.mask)
	m.Save(4, &x.flags)
	m.Save(5, &x.epoll)
}

func (x *pollEntry) StateLoad(m state.Source) {
	m.Load(0, &x.pollEntryEntry)
	m.LoadWait(1, &x.id)
	m.Load(2, &x.userData)
	m.Load(3, &x.mask)
	m.Load(4, &x.flags)
	m.Load(5, &x.epoll)
	m.AfterLoad(x.afterLoad)
}

func (x *EventPoll) StateTypeName() string {
	return "pkg/sentry/kernel/epoll.EventPoll"
}

func (x *EventPoll) StateFields() []string {
	return []string{
		"files",
		"readyList",
		"waitingList",
		"disabledList",
	}
}

func (x *EventPoll) beforeSave() {}

func (x *EventPoll) StateSave(m state.Sink) {
	x.beforeSave()
	if !state.IsZeroValue(&x.FilePipeSeek) {
		state.Failf("FilePipeSeek is %#v, expected zero", &x.FilePipeSeek)
	}
	if !state.IsZeroValue(&x.FileNotDirReaddir) {
		state.Failf("FileNotDirReaddir is %#v, expected zero", &x.FileNotDirReaddir)
	}
	if !state.IsZeroValue(&x.FileNoFsync) {
		state.Failf("FileNoFsync is %#v, expected zero", &x.FileNoFsync)
	}
	if !state.IsZeroValue(&x.FileNoopFlush) {
		state.Failf("FileNoopFlush is %#v, expected zero", &x.FileNoopFlush)
	}
	if !state.IsZeroValue(&x.FileNoIoctl) {
		state.Failf("FileNoIoctl is %#v, expected zero", &x.FileNoIoctl)
	}
	if !state.IsZeroValue(&x.FileNoMMap) {
		state.Failf("FileNoMMap is %#v, expected zero", &x.FileNoMMap)
	}
	if !state.IsZeroValue(&x.Queue) {
		state.Failf("Queue is %#v, expected zero", &x.Queue)
	}
	m.Save(0, &x.files)
	m.Save(1, &x.readyList)
	m.Save(2, &x.waitingList)
	m.Save(3, &x.disabledList)
}

func (x *EventPoll) StateLoad(m state.Source) {
	m.Load(0, &x.files)
	m.Load(1, &x.readyList)
	m.Load(2, &x.waitingList)
	m.Load(3, &x.disabledList)
	m.AfterLoad(x.afterLoad)
}

func (x *pollEntryList) StateTypeName() string {
	return "pkg/sentry/kernel/epoll.pollEntryList"
}

func (x *pollEntryList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (x *pollEntryList) beforeSave() {}

func (x *pollEntryList) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.head)
	m.Save(1, &x.tail)
}

func (x *pollEntryList) afterLoad() {}

func (x *pollEntryList) StateLoad(m state.Source) {
	m.Load(0, &x.head)
	m.Load(1, &x.tail)
}

func (x *pollEntryEntry) StateTypeName() string {
	return "pkg/sentry/kernel/epoll.pollEntryEntry"
}

func (x *pollEntryEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (x *pollEntryEntry) beforeSave() {}

func (x *pollEntryEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.next)
	m.Save(1, &x.prev)
}

func (x *pollEntryEntry) afterLoad() {}

func (x *pollEntryEntry) StateLoad(m state.Source) {
	m.Load(0, &x.next)
	m.Load(1, &x.prev)
}

func init() {
	state.Register((*FileIdentifier)(nil))
	state.Register((*pollEntry)(nil))
	state.Register((*EventPoll)(nil))
	state.Register((*pollEntryList)(nil))
	state.Register((*pollEntryEntry)(nil))
}
