// automatically generated by stateify.

package pipe

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (i *inodeOperations) StateTypeName() string {
	return "pkg/sentry/kernel/pipe.inodeOperations"
}

func (i *inodeOperations) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"p",
	}
}

func (i *inodeOperations) beforeSave() {}

func (i *inodeOperations) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.InodeSimpleAttributes)
	stateSinkObject.Save(1, &i.p)
}

func (i *inodeOperations) afterLoad() {}

func (i *inodeOperations) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.InodeSimpleAttributes)
	stateSourceObject.Load(1, &i.p)
}

func (p *Pipe) StateTypeName() string {
	return "pkg/sentry/kernel/pipe.Pipe"
}

func (p *Pipe) StateFields() []string {
	return []string{
		"isNamed",
		"atomicIOBytes",
		"readers",
		"writers",
		"view",
		"max",
		"hadWriter",
	}
}

func (p *Pipe) beforeSave() {}

func (p *Pipe) StateSave(stateSinkObject state.Sink) {
	p.beforeSave()
	stateSinkObject.Save(0, &p.isNamed)
	stateSinkObject.Save(1, &p.atomicIOBytes)
	stateSinkObject.Save(2, &p.readers)
	stateSinkObject.Save(3, &p.writers)
	stateSinkObject.Save(4, &p.view)
	stateSinkObject.Save(5, &p.max)
	stateSinkObject.Save(6, &p.hadWriter)
}

func (p *Pipe) afterLoad() {}

func (p *Pipe) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &p.isNamed)
	stateSourceObject.Load(1, &p.atomicIOBytes)
	stateSourceObject.Load(2, &p.readers)
	stateSourceObject.Load(3, &p.writers)
	stateSourceObject.Load(4, &p.view)
	stateSourceObject.Load(5, &p.max)
	stateSourceObject.Load(6, &p.hadWriter)
}

func (r *Reader) StateTypeName() string {
	return "pkg/sentry/kernel/pipe.Reader"
}

func (r *Reader) StateFields() []string {
	return []string{
		"ReaderWriter",
	}
}

func (r *Reader) beforeSave() {}

func (r *Reader) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.ReaderWriter)
}

func (r *Reader) afterLoad() {}

func (r *Reader) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.ReaderWriter)
}

func (rw *ReaderWriter) StateTypeName() string {
	return "pkg/sentry/kernel/pipe.ReaderWriter"
}

func (rw *ReaderWriter) StateFields() []string {
	return []string{
		"Pipe",
	}
}

func (rw *ReaderWriter) beforeSave() {}

func (rw *ReaderWriter) StateSave(stateSinkObject state.Sink) {
	rw.beforeSave()
	stateSinkObject.Save(0, &rw.Pipe)
}

func (rw *ReaderWriter) afterLoad() {}

func (rw *ReaderWriter) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &rw.Pipe)
}

func (w *Writer) StateTypeName() string {
	return "pkg/sentry/kernel/pipe.Writer"
}

func (w *Writer) StateFields() []string {
	return []string{
		"ReaderWriter",
	}
}

func (w *Writer) beforeSave() {}

func (w *Writer) StateSave(stateSinkObject state.Sink) {
	w.beforeSave()
	stateSinkObject.Save(0, &w.ReaderWriter)
}

func (w *Writer) afterLoad() {}

func (w *Writer) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &w.ReaderWriter)
}

func init() {
	state.Register((*inodeOperations)(nil))
	state.Register((*Pipe)(nil))
	state.Register((*Reader)(nil))
	state.Register((*ReaderWriter)(nil))
	state.Register((*Writer)(nil))
}
