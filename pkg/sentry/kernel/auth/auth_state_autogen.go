// automatically generated by stateify.

package auth

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *Credentials) StateTypeName() string {
	return "pkg/sentry/kernel/auth.Credentials"
}

func (x *Credentials) StateFields() []string {
	return []string{
		"RealKUID",
		"EffectiveKUID",
		"SavedKUID",
		"RealKGID",
		"EffectiveKGID",
		"SavedKGID",
		"ExtraKGIDs",
		"PermittedCaps",
		"InheritableCaps",
		"EffectiveCaps",
		"BoundingCaps",
		"KeepCaps",
		"UserNamespace",
	}
}

func (x *Credentials) beforeSave() {}

func (x *Credentials) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.RealKUID)
	m.Save(1, &x.EffectiveKUID)
	m.Save(2, &x.SavedKUID)
	m.Save(3, &x.RealKGID)
	m.Save(4, &x.EffectiveKGID)
	m.Save(5, &x.SavedKGID)
	m.Save(6, &x.ExtraKGIDs)
	m.Save(7, &x.PermittedCaps)
	m.Save(8, &x.InheritableCaps)
	m.Save(9, &x.EffectiveCaps)
	m.Save(10, &x.BoundingCaps)
	m.Save(11, &x.KeepCaps)
	m.Save(12, &x.UserNamespace)
}

func (x *Credentials) afterLoad() {}

func (x *Credentials) StateLoad(m state.Source) {
	m.Load(0, &x.RealKUID)
	m.Load(1, &x.EffectiveKUID)
	m.Load(2, &x.SavedKUID)
	m.Load(3, &x.RealKGID)
	m.Load(4, &x.EffectiveKGID)
	m.Load(5, &x.SavedKGID)
	m.Load(6, &x.ExtraKGIDs)
	m.Load(7, &x.PermittedCaps)
	m.Load(8, &x.InheritableCaps)
	m.Load(9, &x.EffectiveCaps)
	m.Load(10, &x.BoundingCaps)
	m.Load(11, &x.KeepCaps)
	m.Load(12, &x.UserNamespace)
}

func (x *IDMapEntry) StateTypeName() string {
	return "pkg/sentry/kernel/auth.IDMapEntry"
}

func (x *IDMapEntry) StateFields() []string {
	return []string{
		"FirstID",
		"FirstParentID",
		"Length",
	}
}

func (x *IDMapEntry) beforeSave() {}

func (x *IDMapEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.FirstID)
	m.Save(1, &x.FirstParentID)
	m.Save(2, &x.Length)
}

func (x *IDMapEntry) afterLoad() {}

func (x *IDMapEntry) StateLoad(m state.Source) {
	m.Load(0, &x.FirstID)
	m.Load(1, &x.FirstParentID)
	m.Load(2, &x.Length)
}

func (x *idMapRange) StateTypeName() string {
	return "pkg/sentry/kernel/auth.idMapRange"
}

func (x *idMapRange) StateFields() []string {
	return []string{
		"Start",
		"End",
	}
}

func (x *idMapRange) beforeSave() {}

func (x *idMapRange) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Start)
	m.Save(1, &x.End)
}

func (x *idMapRange) afterLoad() {}

func (x *idMapRange) StateLoad(m state.Source) {
	m.Load(0, &x.Start)
	m.Load(1, &x.End)
}

func (x *idMapSet) StateTypeName() string {
	return "pkg/sentry/kernel/auth.idMapSet"
}

func (x *idMapSet) StateFields() []string {
	return []string{
		"root",
	}
}

func (x *idMapSet) beforeSave() {}

func (x *idMapSet) StateSave(m state.Sink) {
	x.beforeSave()
	var root *idMapSegmentDataSlices = x.saveRoot()
	m.SaveValue(0, root)
}

func (x *idMapSet) afterLoad() {}

func (x *idMapSet) StateLoad(m state.Source) {
	m.LoadValue(0, new(*idMapSegmentDataSlices), func(y interface{}) { x.loadRoot(y.(*idMapSegmentDataSlices)) })
}

func (x *idMapnode) StateTypeName() string {
	return "pkg/sentry/kernel/auth.idMapnode"
}

func (x *idMapnode) StateFields() []string {
	return []string{
		"nrSegments",
		"parent",
		"parentIndex",
		"hasChildren",
		"maxGap",
		"keys",
		"values",
		"children",
	}
}

func (x *idMapnode) beforeSave() {}

func (x *idMapnode) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.nrSegments)
	m.Save(1, &x.parent)
	m.Save(2, &x.parentIndex)
	m.Save(3, &x.hasChildren)
	m.Save(4, &x.maxGap)
	m.Save(5, &x.keys)
	m.Save(6, &x.values)
	m.Save(7, &x.children)
}

func (x *idMapnode) afterLoad() {}

func (x *idMapnode) StateLoad(m state.Source) {
	m.Load(0, &x.nrSegments)
	m.Load(1, &x.parent)
	m.Load(2, &x.parentIndex)
	m.Load(3, &x.hasChildren)
	m.Load(4, &x.maxGap)
	m.Load(5, &x.keys)
	m.Load(6, &x.values)
	m.Load(7, &x.children)
}

func (x *idMapSegmentDataSlices) StateTypeName() string {
	return "pkg/sentry/kernel/auth.idMapSegmentDataSlices"
}

func (x *idMapSegmentDataSlices) StateFields() []string {
	return []string{
		"Start",
		"End",
		"Values",
	}
}

func (x *idMapSegmentDataSlices) beforeSave() {}

func (x *idMapSegmentDataSlices) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Start)
	m.Save(1, &x.End)
	m.Save(2, &x.Values)
}

func (x *idMapSegmentDataSlices) afterLoad() {}

func (x *idMapSegmentDataSlices) StateLoad(m state.Source) {
	m.Load(0, &x.Start)
	m.Load(1, &x.End)
	m.Load(2, &x.Values)
}

func (x *UserNamespace) StateTypeName() string {
	return "pkg/sentry/kernel/auth.UserNamespace"
}

func (x *UserNamespace) StateFields() []string {
	return []string{
		"parent",
		"owner",
		"uidMapFromParent",
		"uidMapToParent",
		"gidMapFromParent",
		"gidMapToParent",
	}
}

func (x *UserNamespace) beforeSave() {}

func (x *UserNamespace) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.parent)
	m.Save(1, &x.owner)
	m.Save(2, &x.uidMapFromParent)
	m.Save(3, &x.uidMapToParent)
	m.Save(4, &x.gidMapFromParent)
	m.Save(5, &x.gidMapToParent)
}

func (x *UserNamespace) afterLoad() {}

func (x *UserNamespace) StateLoad(m state.Source) {
	m.Load(0, &x.parent)
	m.Load(1, &x.owner)
	m.Load(2, &x.uidMapFromParent)
	m.Load(3, &x.uidMapToParent)
	m.Load(4, &x.gidMapFromParent)
	m.Load(5, &x.gidMapToParent)
}

func init() {
	state.Register((*Credentials)(nil))
	state.Register((*IDMapEntry)(nil))
	state.Register((*idMapRange)(nil))
	state.Register((*idMapSet)(nil))
	state.Register((*idMapnode)(nil))
	state.Register((*idMapSegmentDataSlices)(nil))
	state.Register((*UserNamespace)(nil))
}
