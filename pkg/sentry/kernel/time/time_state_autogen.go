// automatically generated by stateify.

package time

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *Time) StateTypeName() string {
	return "pkg/sentry/kernel/time.Time"
}

func (x *Time) StateFields() []string {
	return []string{
		"ns",
	}
}

func (x *Time) beforeSave() {}

func (x *Time) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.ns)
}

func (x *Time) afterLoad() {}

func (x *Time) StateLoad(m state.Source) {
	m.Load(0, &x.ns)
}

func (x *Setting) StateTypeName() string {
	return "pkg/sentry/kernel/time.Setting"
}

func (x *Setting) StateFields() []string {
	return []string{
		"Enabled",
		"Next",
		"Period",
	}
}

func (x *Setting) beforeSave() {}

func (x *Setting) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Enabled)
	m.Save(1, &x.Next)
	m.Save(2, &x.Period)
}

func (x *Setting) afterLoad() {}

func (x *Setting) StateLoad(m state.Source) {
	m.Load(0, &x.Enabled)
	m.Load(1, &x.Next)
	m.Load(2, &x.Period)
}

func (x *Timer) StateTypeName() string {
	return "pkg/sentry/kernel/time.Timer"
}

func (x *Timer) StateFields() []string {
	return []string{
		"clock",
		"listener",
		"setting",
		"paused",
	}
}

func (x *Timer) beforeSave() {}

func (x *Timer) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.clock)
	m.Save(1, &x.listener)
	m.Save(2, &x.setting)
	m.Save(3, &x.paused)
}

func (x *Timer) afterLoad() {}

func (x *Timer) StateLoad(m state.Source) {
	m.Load(0, &x.clock)
	m.Load(1, &x.listener)
	m.Load(2, &x.setting)
	m.Load(3, &x.paused)
}

func init() {
	state.Register((*Time)(nil))
	state.Register((*Setting)(nil))
	state.Register((*Timer)(nil))
}
