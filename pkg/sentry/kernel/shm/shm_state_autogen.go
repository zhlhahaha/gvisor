// automatically generated by stateify.

package shm

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *Registry) StateTypeName() string {
	return "pkg/sentry/kernel/shm.Registry"
}

func (x *Registry) StateFields() []string {
	return []string{
		"userNS",
		"shms",
		"keysToShms",
		"totalPages",
		"lastIDUsed",
	}
}

func (x *Registry) beforeSave() {}

func (x *Registry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.userNS)
	m.Save(1, &x.shms)
	m.Save(2, &x.keysToShms)
	m.Save(3, &x.totalPages)
	m.Save(4, &x.lastIDUsed)
}

func (x *Registry) afterLoad() {}

func (x *Registry) StateLoad(m state.Source) {
	m.Load(0, &x.userNS)
	m.Load(1, &x.shms)
	m.Load(2, &x.keysToShms)
	m.Load(3, &x.totalPages)
	m.Load(4, &x.lastIDUsed)
}

func (x *Shm) StateTypeName() string {
	return "pkg/sentry/kernel/shm.Shm"
}

func (x *Shm) StateFields() []string {
	return []string{
		"ShmRefs",
		"mfp",
		"registry",
		"ID",
		"creator",
		"size",
		"effectiveSize",
		"fr",
		"key",
		"perms",
		"owner",
		"attachTime",
		"detachTime",
		"changeTime",
		"creatorPID",
		"lastAttachDetachPID",
		"pendingDestruction",
	}
}

func (x *Shm) beforeSave() {}

func (x *Shm) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.ShmRefs)
	m.Save(1, &x.mfp)
	m.Save(2, &x.registry)
	m.Save(3, &x.ID)
	m.Save(4, &x.creator)
	m.Save(5, &x.size)
	m.Save(6, &x.effectiveSize)
	m.Save(7, &x.fr)
	m.Save(8, &x.key)
	m.Save(9, &x.perms)
	m.Save(10, &x.owner)
	m.Save(11, &x.attachTime)
	m.Save(12, &x.detachTime)
	m.Save(13, &x.changeTime)
	m.Save(14, &x.creatorPID)
	m.Save(15, &x.lastAttachDetachPID)
	m.Save(16, &x.pendingDestruction)
}

func (x *Shm) afterLoad() {}

func (x *Shm) StateLoad(m state.Source) {
	m.Load(0, &x.ShmRefs)
	m.Load(1, &x.mfp)
	m.Load(2, &x.registry)
	m.Load(3, &x.ID)
	m.Load(4, &x.creator)
	m.Load(5, &x.size)
	m.Load(6, &x.effectiveSize)
	m.Load(7, &x.fr)
	m.Load(8, &x.key)
	m.Load(9, &x.perms)
	m.Load(10, &x.owner)
	m.Load(11, &x.attachTime)
	m.Load(12, &x.detachTime)
	m.Load(13, &x.changeTime)
	m.Load(14, &x.creatorPID)
	m.Load(15, &x.lastAttachDetachPID)
	m.Load(16, &x.pendingDestruction)
}

func (x *ShmRefs) StateTypeName() string {
	return "pkg/sentry/kernel/shm.ShmRefs"
}

func (x *ShmRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (x *ShmRefs) beforeSave() {}

func (x *ShmRefs) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.refCount)
}

func (x *ShmRefs) afterLoad() {}

func (x *ShmRefs) StateLoad(m state.Source) {
	m.Load(0, &x.refCount)
}

func init() {
	state.Register((*Registry)(nil))
	state.Register((*Shm)(nil))
	state.Register((*ShmRefs)(nil))
}
