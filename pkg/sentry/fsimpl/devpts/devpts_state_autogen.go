// automatically generated by stateify.

package devpts

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *lineDiscipline) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.lineDiscipline"
}

func (x *lineDiscipline) StateFields() []string {
	return []string{
		"size",
		"inQueue",
		"outQueue",
		"termios",
		"column",
	}
}

func (x *lineDiscipline) beforeSave() {}

func (x *lineDiscipline) StateSave(m state.Sink) {
	x.beforeSave()
	if !state.IsZeroValue(&x.masterWaiter) {
		state.Failf("masterWaiter is %#v, expected zero", &x.masterWaiter)
	}
	if !state.IsZeroValue(&x.replicaWaiter) {
		state.Failf("replicaWaiter is %#v, expected zero", &x.replicaWaiter)
	}
	m.Save(0, &x.size)
	m.Save(1, &x.inQueue)
	m.Save(2, &x.outQueue)
	m.Save(3, &x.termios)
	m.Save(4, &x.column)
}

func (x *lineDiscipline) afterLoad() {}

func (x *lineDiscipline) StateLoad(m state.Source) {
	m.Load(0, &x.size)
	m.Load(1, &x.inQueue)
	m.Load(2, &x.outQueue)
	m.Load(3, &x.termios)
	m.Load(4, &x.column)
}

func (x *outputQueueTransformer) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.outputQueueTransformer"
}

func (x *outputQueueTransformer) StateFields() []string {
	return []string{}
}

func (x *outputQueueTransformer) beforeSave() {}

func (x *outputQueueTransformer) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *outputQueueTransformer) afterLoad() {}

func (x *outputQueueTransformer) StateLoad(m state.Source) {
}

func (x *inputQueueTransformer) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.inputQueueTransformer"
}

func (x *inputQueueTransformer) StateFields() []string {
	return []string{}
}

func (x *inputQueueTransformer) beforeSave() {}

func (x *inputQueueTransformer) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *inputQueueTransformer) afterLoad() {}

func (x *inputQueueTransformer) StateLoad(m state.Source) {
}

func (x *queue) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.queue"
}

func (x *queue) StateFields() []string {
	return []string{
		"readBuf",
		"waitBuf",
		"waitBufLen",
		"readable",
		"transformer",
	}
}

func (x *queue) beforeSave() {}

func (x *queue) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.readBuf)
	m.Save(1, &x.waitBuf)
	m.Save(2, &x.waitBufLen)
	m.Save(3, &x.readable)
	m.Save(4, &x.transformer)
}

func (x *queue) afterLoad() {}

func (x *queue) StateLoad(m state.Source) {
	m.Load(0, &x.readBuf)
	m.Load(1, &x.waitBuf)
	m.Load(2, &x.waitBufLen)
	m.Load(3, &x.readable)
	m.Load(4, &x.transformer)
}

func (x *rootInodeRefs) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.rootInodeRefs"
}

func (x *rootInodeRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (x *rootInodeRefs) beforeSave() {}

func (x *rootInodeRefs) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.refCount)
}

func (x *rootInodeRefs) afterLoad() {}

func (x *rootInodeRefs) StateLoad(m state.Source) {
	m.Load(0, &x.refCount)
}

func (x *Terminal) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.Terminal"
}

func (x *Terminal) StateFields() []string {
	return []string{
		"n",
		"ld",
		"masterKTTY",
		"replicaKTTY",
	}
}

func (x *Terminal) beforeSave() {}

func (x *Terminal) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.n)
	m.Save(1, &x.ld)
	m.Save(2, &x.masterKTTY)
	m.Save(3, &x.replicaKTTY)
}

func (x *Terminal) afterLoad() {}

func (x *Terminal) StateLoad(m state.Source) {
	m.Load(0, &x.n)
	m.Load(1, &x.ld)
	m.Load(2, &x.masterKTTY)
	m.Load(3, &x.replicaKTTY)
}

func init() {
	state.Register((*lineDiscipline)(nil))
	state.Register((*outputQueueTransformer)(nil))
	state.Register((*inputQueueTransformer)(nil))
	state.Register((*queue)(nil))
	state.Register((*rootInodeRefs)(nil))
	state.Register((*Terminal)(nil))
}
