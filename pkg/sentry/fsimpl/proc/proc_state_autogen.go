// automatically generated by stateify.

package proc

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (r *fdDirInodeRefs) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.fdDirInodeRefs"
}

func (r *fdDirInodeRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (r *fdDirInodeRefs) beforeSave() {}

func (r *fdDirInodeRefs) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.refCount)
}

func (r *fdDirInodeRefs) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.refCount)
	stateSourceObject.AfterLoad(r.afterLoad)
}

func (r *fdInfoDirInodeRefs) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.fdInfoDirInodeRefs"
}

func (r *fdInfoDirInodeRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (r *fdInfoDirInodeRefs) beforeSave() {}

func (r *fdInfoDirInodeRefs) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.refCount)
}

func (r *fdInfoDirInodeRefs) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.refCount)
	stateSourceObject.AfterLoad(r.afterLoad)
}

func (ft *FilesystemType) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.FilesystemType"
}

func (ft *FilesystemType) StateFields() []string {
	return []string{}
}

func (ft *FilesystemType) beforeSave() {}

func (ft *FilesystemType) StateSave(stateSinkObject state.Sink) {
	ft.beforeSave()
}

func (ft *FilesystemType) afterLoad() {}

func (ft *FilesystemType) StateLoad(stateSourceObject state.Source) {
}

func (fs *filesystem) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.filesystem"
}

func (fs *filesystem) StateFields() []string {
	return []string{
		"Filesystem",
		"devMinor",
	}
}

func (fs *filesystem) beforeSave() {}

func (fs *filesystem) StateSave(stateSinkObject state.Sink) {
	fs.beforeSave()
	stateSinkObject.Save(0, &fs.Filesystem)
	stateSinkObject.Save(1, &fs.devMinor)
}

func (fs *filesystem) afterLoad() {}

func (fs *filesystem) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &fs.Filesystem)
	stateSourceObject.Load(1, &fs.devMinor)
}

func (s *staticFile) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.staticFile"
}

func (s *staticFile) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"StaticData",
	}
}

func (s *staticFile) beforeSave() {}

func (s *staticFile) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.DynamicBytesFile)
	stateSinkObject.Save(1, &s.StaticData)
}

func (s *staticFile) afterLoad() {}

func (s *staticFile) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.DynamicBytesFile)
	stateSourceObject.Load(1, &s.StaticData)
}

func (i *InternalData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.InternalData"
}

func (i *InternalData) StateFields() []string {
	return []string{
		"Cgroups",
	}
}

func (i *InternalData) beforeSave() {}

func (i *InternalData) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.Cgroups)
}

func (i *InternalData) afterLoad() {}

func (i *InternalData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.Cgroups)
}

func (i *implStatFS) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.implStatFS"
}

func (i *implStatFS) StateFields() []string {
	return []string{}
}

func (i *implStatFS) beforeSave() {}

func (i *implStatFS) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
}

func (i *implStatFS) afterLoad() {}

func (i *implStatFS) StateLoad(stateSourceObject state.Source) {
}

func (i *subtasksInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.subtasksInode"
}

func (i *subtasksInode) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAlwaysValid",
		"InodeAttrs",
		"InodeDirectoryNoNewChildren",
		"InodeNotSymlink",
		"InodeTemporary",
		"OrderedChildren",
		"subtasksInodeRefs",
		"locks",
		"fs",
		"task",
		"pidns",
		"cgroupControllers",
	}
}

func (i *subtasksInode) beforeSave() {}

func (i *subtasksInode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.implStatFS)
	stateSinkObject.Save(1, &i.InodeAlwaysValid)
	stateSinkObject.Save(2, &i.InodeAttrs)
	stateSinkObject.Save(3, &i.InodeDirectoryNoNewChildren)
	stateSinkObject.Save(4, &i.InodeNotSymlink)
	stateSinkObject.Save(5, &i.InodeTemporary)
	stateSinkObject.Save(6, &i.OrderedChildren)
	stateSinkObject.Save(7, &i.subtasksInodeRefs)
	stateSinkObject.Save(8, &i.locks)
	stateSinkObject.Save(9, &i.fs)
	stateSinkObject.Save(10, &i.task)
	stateSinkObject.Save(11, &i.pidns)
	stateSinkObject.Save(12, &i.cgroupControllers)
}

func (i *subtasksInode) afterLoad() {}

func (i *subtasksInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.implStatFS)
	stateSourceObject.Load(1, &i.InodeAlwaysValid)
	stateSourceObject.Load(2, &i.InodeAttrs)
	stateSourceObject.Load(3, &i.InodeDirectoryNoNewChildren)
	stateSourceObject.Load(4, &i.InodeNotSymlink)
	stateSourceObject.Load(5, &i.InodeTemporary)
	stateSourceObject.Load(6, &i.OrderedChildren)
	stateSourceObject.Load(7, &i.subtasksInodeRefs)
	stateSourceObject.Load(8, &i.locks)
	stateSourceObject.Load(9, &i.fs)
	stateSourceObject.Load(10, &i.task)
	stateSourceObject.Load(11, &i.pidns)
	stateSourceObject.Load(12, &i.cgroupControllers)
}

func (fd *subtasksFD) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.subtasksFD"
}

func (fd *subtasksFD) StateFields() []string {
	return []string{
		"GenericDirectoryFD",
		"task",
	}
}

func (fd *subtasksFD) beforeSave() {}

func (fd *subtasksFD) StateSave(stateSinkObject state.Sink) {
	fd.beforeSave()
	stateSinkObject.Save(0, &fd.GenericDirectoryFD)
	stateSinkObject.Save(1, &fd.task)
}

func (fd *subtasksFD) afterLoad() {}

func (fd *subtasksFD) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &fd.GenericDirectoryFD)
	stateSourceObject.Load(1, &fd.task)
}

func (r *subtasksInodeRefs) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.subtasksInodeRefs"
}

func (r *subtasksInodeRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (r *subtasksInodeRefs) beforeSave() {}

func (r *subtasksInodeRefs) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.refCount)
}

func (r *subtasksInodeRefs) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.refCount)
	stateSourceObject.AfterLoad(r.afterLoad)
}

func (i *taskInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.taskInode"
}

func (i *taskInode) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAttrs",
		"InodeDirectoryNoNewChildren",
		"InodeNotSymlink",
		"InodeTemporary",
		"OrderedChildren",
		"taskInodeRefs",
		"locks",
		"task",
	}
}

func (i *taskInode) beforeSave() {}

func (i *taskInode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.implStatFS)
	stateSinkObject.Save(1, &i.InodeAttrs)
	stateSinkObject.Save(2, &i.InodeDirectoryNoNewChildren)
	stateSinkObject.Save(3, &i.InodeNotSymlink)
	stateSinkObject.Save(4, &i.InodeTemporary)
	stateSinkObject.Save(5, &i.OrderedChildren)
	stateSinkObject.Save(6, &i.taskInodeRefs)
	stateSinkObject.Save(7, &i.locks)
	stateSinkObject.Save(8, &i.task)
}

func (i *taskInode) afterLoad() {}

func (i *taskInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.implStatFS)
	stateSourceObject.Load(1, &i.InodeAttrs)
	stateSourceObject.Load(2, &i.InodeDirectoryNoNewChildren)
	stateSourceObject.Load(3, &i.InodeNotSymlink)
	stateSourceObject.Load(4, &i.InodeTemporary)
	stateSourceObject.Load(5, &i.OrderedChildren)
	stateSourceObject.Load(6, &i.taskInodeRefs)
	stateSourceObject.Load(7, &i.locks)
	stateSourceObject.Load(8, &i.task)
}

func (i *taskOwnedInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.taskOwnedInode"
}

func (i *taskOwnedInode) StateFields() []string {
	return []string{
		"Inode",
		"owner",
	}
}

func (i *taskOwnedInode) beforeSave() {}

func (i *taskOwnedInode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.Inode)
	stateSinkObject.Save(1, &i.owner)
}

func (i *taskOwnedInode) afterLoad() {}

func (i *taskOwnedInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.Inode)
	stateSourceObject.Load(1, &i.owner)
}

func (i *fdDir) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.fdDir"
}

func (i *fdDir) StateFields() []string {
	return []string{
		"locks",
		"fs",
		"task",
		"produceSymlink",
	}
}

func (i *fdDir) beforeSave() {}

func (i *fdDir) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.locks)
	stateSinkObject.Save(1, &i.fs)
	stateSinkObject.Save(2, &i.task)
	stateSinkObject.Save(3, &i.produceSymlink)
}

func (i *fdDir) afterLoad() {}

func (i *fdDir) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.locks)
	stateSourceObject.Load(1, &i.fs)
	stateSourceObject.Load(2, &i.task)
	stateSourceObject.Load(3, &i.produceSymlink)
}

func (i *fdDirInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.fdDirInode"
}

func (i *fdDirInode) StateFields() []string {
	return []string{
		"fdDir",
		"fdDirInodeRefs",
		"implStatFS",
		"InodeAlwaysValid",
		"InodeAttrs",
		"InodeDirectoryNoNewChildren",
		"InodeNotSymlink",
		"InodeTemporary",
		"OrderedChildren",
	}
}

func (i *fdDirInode) beforeSave() {}

func (i *fdDirInode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.fdDir)
	stateSinkObject.Save(1, &i.fdDirInodeRefs)
	stateSinkObject.Save(2, &i.implStatFS)
	stateSinkObject.Save(3, &i.InodeAlwaysValid)
	stateSinkObject.Save(4, &i.InodeAttrs)
	stateSinkObject.Save(5, &i.InodeDirectoryNoNewChildren)
	stateSinkObject.Save(6, &i.InodeNotSymlink)
	stateSinkObject.Save(7, &i.InodeTemporary)
	stateSinkObject.Save(8, &i.OrderedChildren)
}

func (i *fdDirInode) afterLoad() {}

func (i *fdDirInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.fdDir)
	stateSourceObject.Load(1, &i.fdDirInodeRefs)
	stateSourceObject.Load(2, &i.implStatFS)
	stateSourceObject.Load(3, &i.InodeAlwaysValid)
	stateSourceObject.Load(4, &i.InodeAttrs)
	stateSourceObject.Load(5, &i.InodeDirectoryNoNewChildren)
	stateSourceObject.Load(6, &i.InodeNotSymlink)
	stateSourceObject.Load(7, &i.InodeTemporary)
	stateSourceObject.Load(8, &i.OrderedChildren)
}

func (s *fdSymlink) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.fdSymlink"
}

func (s *fdSymlink) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAttrs",
		"InodeNoopRefCount",
		"InodeSymlink",
		"task",
		"fd",
	}
}

func (s *fdSymlink) beforeSave() {}

func (s *fdSymlink) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.implStatFS)
	stateSinkObject.Save(1, &s.InodeAttrs)
	stateSinkObject.Save(2, &s.InodeNoopRefCount)
	stateSinkObject.Save(3, &s.InodeSymlink)
	stateSinkObject.Save(4, &s.task)
	stateSinkObject.Save(5, &s.fd)
}

func (s *fdSymlink) afterLoad() {}

func (s *fdSymlink) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.implStatFS)
	stateSourceObject.Load(1, &s.InodeAttrs)
	stateSourceObject.Load(2, &s.InodeNoopRefCount)
	stateSourceObject.Load(3, &s.InodeSymlink)
	stateSourceObject.Load(4, &s.task)
	stateSourceObject.Load(5, &s.fd)
}

func (i *fdInfoDirInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.fdInfoDirInode"
}

func (i *fdInfoDirInode) StateFields() []string {
	return []string{
		"fdDir",
		"fdInfoDirInodeRefs",
		"implStatFS",
		"InodeAlwaysValid",
		"InodeAttrs",
		"InodeDirectoryNoNewChildren",
		"InodeNotSymlink",
		"InodeTemporary",
		"OrderedChildren",
	}
}

func (i *fdInfoDirInode) beforeSave() {}

func (i *fdInfoDirInode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.fdDir)
	stateSinkObject.Save(1, &i.fdInfoDirInodeRefs)
	stateSinkObject.Save(2, &i.implStatFS)
	stateSinkObject.Save(3, &i.InodeAlwaysValid)
	stateSinkObject.Save(4, &i.InodeAttrs)
	stateSinkObject.Save(5, &i.InodeDirectoryNoNewChildren)
	stateSinkObject.Save(6, &i.InodeNotSymlink)
	stateSinkObject.Save(7, &i.InodeTemporary)
	stateSinkObject.Save(8, &i.OrderedChildren)
}

func (i *fdInfoDirInode) afterLoad() {}

func (i *fdInfoDirInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.fdDir)
	stateSourceObject.Load(1, &i.fdInfoDirInodeRefs)
	stateSourceObject.Load(2, &i.implStatFS)
	stateSourceObject.Load(3, &i.InodeAlwaysValid)
	stateSourceObject.Load(4, &i.InodeAttrs)
	stateSourceObject.Load(5, &i.InodeDirectoryNoNewChildren)
	stateSourceObject.Load(6, &i.InodeNotSymlink)
	stateSourceObject.Load(7, &i.InodeTemporary)
	stateSourceObject.Load(8, &i.OrderedChildren)
}

func (d *fdInfoData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.fdInfoData"
}

func (d *fdInfoData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
		"fd",
	}
}

func (d *fdInfoData) beforeSave() {}

func (d *fdInfoData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.task)
	stateSinkObject.Save(2, &d.fd)
}

func (d *fdInfoData) afterLoad() {}

func (d *fdInfoData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.task)
	stateSourceObject.Load(2, &d.fd)
}

func (d *auxvData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.auxvData"
}

func (d *auxvData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
	}
}

func (d *auxvData) beforeSave() {}

func (d *auxvData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.task)
}

func (d *auxvData) afterLoad() {}

func (d *auxvData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.task)
}

func (d *cmdlineData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.cmdlineData"
}

func (d *cmdlineData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
		"arg",
	}
}

func (d *cmdlineData) beforeSave() {}

func (d *cmdlineData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.task)
	stateSinkObject.Save(2, &d.arg)
}

func (d *cmdlineData) afterLoad() {}

func (d *cmdlineData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.task)
	stateSourceObject.Load(2, &d.arg)
}

func (i *commInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.commInode"
}

func (i *commInode) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
	}
}

func (i *commInode) beforeSave() {}

func (i *commInode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.DynamicBytesFile)
	stateSinkObject.Save(1, &i.task)
}

func (i *commInode) afterLoad() {}

func (i *commInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.DynamicBytesFile)
	stateSourceObject.Load(1, &i.task)
}

func (d *commData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.commData"
}

func (d *commData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
	}
}

func (d *commData) beforeSave() {}

func (d *commData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.task)
}

func (d *commData) afterLoad() {}

func (d *commData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.task)
}

func (d *idMapData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.idMapData"
}

func (d *idMapData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
		"gids",
	}
}

func (d *idMapData) beforeSave() {}

func (d *idMapData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.task)
	stateSinkObject.Save(2, &d.gids)
}

func (d *idMapData) afterLoad() {}

func (d *idMapData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.task)
	stateSourceObject.Load(2, &d.gids)
}

func (f *memInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.memInode"
}

func (f *memInode) StateFields() []string {
	return []string{
		"InodeAttrs",
		"InodeNoStatFS",
		"InodeNoopRefCount",
		"InodeNotDirectory",
		"InodeNotSymlink",
		"task",
		"locks",
	}
}

func (f *memInode) beforeSave() {}

func (f *memInode) StateSave(stateSinkObject state.Sink) {
	f.beforeSave()
	stateSinkObject.Save(0, &f.InodeAttrs)
	stateSinkObject.Save(1, &f.InodeNoStatFS)
	stateSinkObject.Save(2, &f.InodeNoopRefCount)
	stateSinkObject.Save(3, &f.InodeNotDirectory)
	stateSinkObject.Save(4, &f.InodeNotSymlink)
	stateSinkObject.Save(5, &f.task)
	stateSinkObject.Save(6, &f.locks)
}

func (f *memInode) afterLoad() {}

func (f *memInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &f.InodeAttrs)
	stateSourceObject.Load(1, &f.InodeNoStatFS)
	stateSourceObject.Load(2, &f.InodeNoopRefCount)
	stateSourceObject.Load(3, &f.InodeNotDirectory)
	stateSourceObject.Load(4, &f.InodeNotSymlink)
	stateSourceObject.Load(5, &f.task)
	stateSourceObject.Load(6, &f.locks)
}

func (fd *memFD) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.memFD"
}

func (fd *memFD) StateFields() []string {
	return []string{
		"vfsfd",
		"FileDescriptionDefaultImpl",
		"LockFD",
		"inode",
		"offset",
	}
}

func (fd *memFD) beforeSave() {}

func (fd *memFD) StateSave(stateSinkObject state.Sink) {
	fd.beforeSave()
	stateSinkObject.Save(0, &fd.vfsfd)
	stateSinkObject.Save(1, &fd.FileDescriptionDefaultImpl)
	stateSinkObject.Save(2, &fd.LockFD)
	stateSinkObject.Save(3, &fd.inode)
	stateSinkObject.Save(4, &fd.offset)
}

func (fd *memFD) afterLoad() {}

func (fd *memFD) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &fd.vfsfd)
	stateSourceObject.Load(1, &fd.FileDescriptionDefaultImpl)
	stateSourceObject.Load(2, &fd.LockFD)
	stateSourceObject.Load(3, &fd.inode)
	stateSourceObject.Load(4, &fd.offset)
}

func (d *mapsData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.mapsData"
}

func (d *mapsData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
	}
}

func (d *mapsData) beforeSave() {}

func (d *mapsData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.task)
}

func (d *mapsData) afterLoad() {}

func (d *mapsData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.task)
}

func (d *smapsData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.smapsData"
}

func (d *smapsData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
	}
}

func (d *smapsData) beforeSave() {}

func (d *smapsData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.task)
}

func (d *smapsData) afterLoad() {}

func (d *smapsData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.task)
}

func (s *taskStatData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.taskStatData"
}

func (s *taskStatData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
		"tgstats",
		"pidns",
	}
}

func (s *taskStatData) beforeSave() {}

func (s *taskStatData) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.DynamicBytesFile)
	stateSinkObject.Save(1, &s.task)
	stateSinkObject.Save(2, &s.tgstats)
	stateSinkObject.Save(3, &s.pidns)
}

func (s *taskStatData) afterLoad() {}

func (s *taskStatData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.DynamicBytesFile)
	stateSourceObject.Load(1, &s.task)
	stateSourceObject.Load(2, &s.tgstats)
	stateSourceObject.Load(3, &s.pidns)
}

func (s *statmData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.statmData"
}

func (s *statmData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
	}
}

func (s *statmData) beforeSave() {}

func (s *statmData) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.DynamicBytesFile)
	stateSinkObject.Save(1, &s.task)
}

func (s *statmData) afterLoad() {}

func (s *statmData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.DynamicBytesFile)
	stateSourceObject.Load(1, &s.task)
}

func (s *statusData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.statusData"
}

func (s *statusData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
		"pidns",
	}
}

func (s *statusData) beforeSave() {}

func (s *statusData) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.DynamicBytesFile)
	stateSinkObject.Save(1, &s.task)
	stateSinkObject.Save(2, &s.pidns)
}

func (s *statusData) afterLoad() {}

func (s *statusData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.DynamicBytesFile)
	stateSourceObject.Load(1, &s.task)
	stateSourceObject.Load(2, &s.pidns)
}

func (i *ioData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.ioData"
}

func (i *ioData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"ioUsage",
	}
}

func (i *ioData) beforeSave() {}

func (i *ioData) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.DynamicBytesFile)
	stateSinkObject.Save(1, &i.ioUsage)
}

func (i *ioData) afterLoad() {}

func (i *ioData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.DynamicBytesFile)
	stateSourceObject.Load(1, &i.ioUsage)
}

func (o *oomScoreAdj) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.oomScoreAdj"
}

func (o *oomScoreAdj) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
	}
}

func (o *oomScoreAdj) beforeSave() {}

func (o *oomScoreAdj) StateSave(stateSinkObject state.Sink) {
	o.beforeSave()
	stateSinkObject.Save(0, &o.DynamicBytesFile)
	stateSinkObject.Save(1, &o.task)
}

func (o *oomScoreAdj) afterLoad() {}

func (o *oomScoreAdj) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &o.DynamicBytesFile)
	stateSourceObject.Load(1, &o.task)
}

func (s *exeSymlink) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.exeSymlink"
}

func (s *exeSymlink) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAttrs",
		"InodeNoopRefCount",
		"InodeSymlink",
		"task",
	}
}

func (s *exeSymlink) beforeSave() {}

func (s *exeSymlink) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.implStatFS)
	stateSinkObject.Save(1, &s.InodeAttrs)
	stateSinkObject.Save(2, &s.InodeNoopRefCount)
	stateSinkObject.Save(3, &s.InodeSymlink)
	stateSinkObject.Save(4, &s.task)
}

func (s *exeSymlink) afterLoad() {}

func (s *exeSymlink) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.implStatFS)
	stateSourceObject.Load(1, &s.InodeAttrs)
	stateSourceObject.Load(2, &s.InodeNoopRefCount)
	stateSourceObject.Load(3, &s.InodeSymlink)
	stateSourceObject.Load(4, &s.task)
}

func (s *cwdSymlink) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.cwdSymlink"
}

func (s *cwdSymlink) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAttrs",
		"InodeNoopRefCount",
		"InodeSymlink",
		"task",
	}
}

func (s *cwdSymlink) beforeSave() {}

func (s *cwdSymlink) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.implStatFS)
	stateSinkObject.Save(1, &s.InodeAttrs)
	stateSinkObject.Save(2, &s.InodeNoopRefCount)
	stateSinkObject.Save(3, &s.InodeSymlink)
	stateSinkObject.Save(4, &s.task)
}

func (s *cwdSymlink) afterLoad() {}

func (s *cwdSymlink) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.implStatFS)
	stateSourceObject.Load(1, &s.InodeAttrs)
	stateSourceObject.Load(2, &s.InodeNoopRefCount)
	stateSourceObject.Load(3, &s.InodeSymlink)
	stateSourceObject.Load(4, &s.task)
}

func (i *mountInfoData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.mountInfoData"
}

func (i *mountInfoData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
	}
}

func (i *mountInfoData) beforeSave() {}

func (i *mountInfoData) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.DynamicBytesFile)
	stateSinkObject.Save(1, &i.task)
}

func (i *mountInfoData) afterLoad() {}

func (i *mountInfoData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.DynamicBytesFile)
	stateSourceObject.Load(1, &i.task)
}

func (i *mountsData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.mountsData"
}

func (i *mountsData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"task",
	}
}

func (i *mountsData) beforeSave() {}

func (i *mountsData) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.DynamicBytesFile)
	stateSinkObject.Save(1, &i.task)
}

func (i *mountsData) afterLoad() {}

func (i *mountsData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.DynamicBytesFile)
	stateSourceObject.Load(1, &i.task)
}

func (s *namespaceSymlink) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.namespaceSymlink"
}

func (s *namespaceSymlink) StateFields() []string {
	return []string{
		"StaticSymlink",
		"task",
	}
}

func (s *namespaceSymlink) beforeSave() {}

func (s *namespaceSymlink) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.StaticSymlink)
	stateSinkObject.Save(1, &s.task)
}

func (s *namespaceSymlink) afterLoad() {}

func (s *namespaceSymlink) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.StaticSymlink)
	stateSourceObject.Load(1, &s.task)
}

func (i *namespaceInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.namespaceInode"
}

func (i *namespaceInode) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAttrs",
		"InodeNoopRefCount",
		"InodeNotDirectory",
		"InodeNotSymlink",
		"locks",
	}
}

func (i *namespaceInode) beforeSave() {}

func (i *namespaceInode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.implStatFS)
	stateSinkObject.Save(1, &i.InodeAttrs)
	stateSinkObject.Save(2, &i.InodeNoopRefCount)
	stateSinkObject.Save(3, &i.InodeNotDirectory)
	stateSinkObject.Save(4, &i.InodeNotSymlink)
	stateSinkObject.Save(5, &i.locks)
}

func (i *namespaceInode) afterLoad() {}

func (i *namespaceInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.implStatFS)
	stateSourceObject.Load(1, &i.InodeAttrs)
	stateSourceObject.Load(2, &i.InodeNoopRefCount)
	stateSourceObject.Load(3, &i.InodeNotDirectory)
	stateSourceObject.Load(4, &i.InodeNotSymlink)
	stateSourceObject.Load(5, &i.locks)
}

func (fd *namespaceFD) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.namespaceFD"
}

func (fd *namespaceFD) StateFields() []string {
	return []string{
		"FileDescriptionDefaultImpl",
		"LockFD",
		"vfsfd",
		"inode",
	}
}

func (fd *namespaceFD) beforeSave() {}

func (fd *namespaceFD) StateSave(stateSinkObject state.Sink) {
	fd.beforeSave()
	stateSinkObject.Save(0, &fd.FileDescriptionDefaultImpl)
	stateSinkObject.Save(1, &fd.LockFD)
	stateSinkObject.Save(2, &fd.vfsfd)
	stateSinkObject.Save(3, &fd.inode)
}

func (fd *namespaceFD) afterLoad() {}

func (fd *namespaceFD) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &fd.FileDescriptionDefaultImpl)
	stateSourceObject.Load(1, &fd.LockFD)
	stateSourceObject.Load(2, &fd.vfsfd)
	stateSourceObject.Load(3, &fd.inode)
}

func (r *taskInodeRefs) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.taskInodeRefs"
}

func (r *taskInodeRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (r *taskInodeRefs) beforeSave() {}

func (r *taskInodeRefs) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.refCount)
}

func (r *taskInodeRefs) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.refCount)
	stateSourceObject.AfterLoad(r.afterLoad)
}

func (n *ifinet6) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.ifinet6"
}

func (n *ifinet6) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"stack",
	}
}

func (n *ifinet6) beforeSave() {}

func (n *ifinet6) StateSave(stateSinkObject state.Sink) {
	n.beforeSave()
	stateSinkObject.Save(0, &n.DynamicBytesFile)
	stateSinkObject.Save(1, &n.stack)
}

func (n *ifinet6) afterLoad() {}

func (n *ifinet6) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &n.DynamicBytesFile)
	stateSourceObject.Load(1, &n.stack)
}

func (n *netDevData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.netDevData"
}

func (n *netDevData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"stack",
	}
}

func (n *netDevData) beforeSave() {}

func (n *netDevData) StateSave(stateSinkObject state.Sink) {
	n.beforeSave()
	stateSinkObject.Save(0, &n.DynamicBytesFile)
	stateSinkObject.Save(1, &n.stack)
}

func (n *netDevData) afterLoad() {}

func (n *netDevData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &n.DynamicBytesFile)
	stateSourceObject.Load(1, &n.stack)
}

func (n *netUnixData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.netUnixData"
}

func (n *netUnixData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"kernel",
	}
}

func (n *netUnixData) beforeSave() {}

func (n *netUnixData) StateSave(stateSinkObject state.Sink) {
	n.beforeSave()
	stateSinkObject.Save(0, &n.DynamicBytesFile)
	stateSinkObject.Save(1, &n.kernel)
}

func (n *netUnixData) afterLoad() {}

func (n *netUnixData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &n.DynamicBytesFile)
	stateSourceObject.Load(1, &n.kernel)
}

func (d *netTCPData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.netTCPData"
}

func (d *netTCPData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"kernel",
	}
}

func (d *netTCPData) beforeSave() {}

func (d *netTCPData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.kernel)
}

func (d *netTCPData) afterLoad() {}

func (d *netTCPData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.kernel)
}

func (d *netTCP6Data) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.netTCP6Data"
}

func (d *netTCP6Data) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"kernel",
	}
}

func (d *netTCP6Data) beforeSave() {}

func (d *netTCP6Data) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.kernel)
}

func (d *netTCP6Data) afterLoad() {}

func (d *netTCP6Data) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.kernel)
}

func (d *netUDPData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.netUDPData"
}

func (d *netUDPData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"kernel",
	}
}

func (d *netUDPData) beforeSave() {}

func (d *netUDPData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.kernel)
}

func (d *netUDPData) afterLoad() {}

func (d *netUDPData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.kernel)
}

func (d *netSnmpData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.netSnmpData"
}

func (d *netSnmpData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"stack",
	}
}

func (d *netSnmpData) beforeSave() {}

func (d *netSnmpData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.stack)
}

func (d *netSnmpData) afterLoad() {}

func (d *netSnmpData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.stack)
}

func (s *snmpLine) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.snmpLine"
}

func (s *snmpLine) StateFields() []string {
	return []string{
		"prefix",
		"header",
	}
}

func (s *snmpLine) beforeSave() {}

func (s *snmpLine) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.prefix)
	stateSinkObject.Save(1, &s.header)
}

func (s *snmpLine) afterLoad() {}

func (s *snmpLine) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.prefix)
	stateSourceObject.Load(1, &s.header)
}

func (d *netRouteData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.netRouteData"
}

func (d *netRouteData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"stack",
	}
}

func (d *netRouteData) beforeSave() {}

func (d *netRouteData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.stack)
}

func (d *netRouteData) afterLoad() {}

func (d *netRouteData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.stack)
}

func (d *netStatData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.netStatData"
}

func (d *netStatData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"stack",
	}
}

func (d *netStatData) beforeSave() {}

func (d *netStatData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.stack)
}

func (d *netStatData) afterLoad() {}

func (d *netStatData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.stack)
}

func (i *tasksInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.tasksInode"
}

func (i *tasksInode) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAlwaysValid",
		"InodeAttrs",
		"InodeDirectoryNoNewChildren",
		"InodeNotSymlink",
		"InodeTemporary",
		"OrderedChildren",
		"tasksInodeRefs",
		"locks",
		"fs",
		"pidns",
		"cgroupControllers",
	}
}

func (i *tasksInode) beforeSave() {}

func (i *tasksInode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.implStatFS)
	stateSinkObject.Save(1, &i.InodeAlwaysValid)
	stateSinkObject.Save(2, &i.InodeAttrs)
	stateSinkObject.Save(3, &i.InodeDirectoryNoNewChildren)
	stateSinkObject.Save(4, &i.InodeNotSymlink)
	stateSinkObject.Save(5, &i.InodeTemporary)
	stateSinkObject.Save(6, &i.OrderedChildren)
	stateSinkObject.Save(7, &i.tasksInodeRefs)
	stateSinkObject.Save(8, &i.locks)
	stateSinkObject.Save(9, &i.fs)
	stateSinkObject.Save(10, &i.pidns)
	stateSinkObject.Save(11, &i.cgroupControllers)
}

func (i *tasksInode) afterLoad() {}

func (i *tasksInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.implStatFS)
	stateSourceObject.Load(1, &i.InodeAlwaysValid)
	stateSourceObject.Load(2, &i.InodeAttrs)
	stateSourceObject.Load(3, &i.InodeDirectoryNoNewChildren)
	stateSourceObject.Load(4, &i.InodeNotSymlink)
	stateSourceObject.Load(5, &i.InodeTemporary)
	stateSourceObject.Load(6, &i.OrderedChildren)
	stateSourceObject.Load(7, &i.tasksInodeRefs)
	stateSourceObject.Load(8, &i.locks)
	stateSourceObject.Load(9, &i.fs)
	stateSourceObject.Load(10, &i.pidns)
	stateSourceObject.Load(11, &i.cgroupControllers)
}

func (s *staticFileSetStat) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.staticFileSetStat"
}

func (s *staticFileSetStat) StateFields() []string {
	return []string{
		"dynamicBytesFileSetAttr",
		"StaticData",
	}
}

func (s *staticFileSetStat) beforeSave() {}

func (s *staticFileSetStat) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.dynamicBytesFileSetAttr)
	stateSinkObject.Save(1, &s.StaticData)
}

func (s *staticFileSetStat) afterLoad() {}

func (s *staticFileSetStat) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.dynamicBytesFileSetAttr)
	stateSourceObject.Load(1, &s.StaticData)
}

func (s *selfSymlink) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.selfSymlink"
}

func (s *selfSymlink) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAttrs",
		"InodeNoopRefCount",
		"InodeSymlink",
		"pidns",
	}
}

func (s *selfSymlink) beforeSave() {}

func (s *selfSymlink) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.implStatFS)
	stateSinkObject.Save(1, &s.InodeAttrs)
	stateSinkObject.Save(2, &s.InodeNoopRefCount)
	stateSinkObject.Save(3, &s.InodeSymlink)
	stateSinkObject.Save(4, &s.pidns)
}

func (s *selfSymlink) afterLoad() {}

func (s *selfSymlink) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.implStatFS)
	stateSourceObject.Load(1, &s.InodeAttrs)
	stateSourceObject.Load(2, &s.InodeNoopRefCount)
	stateSourceObject.Load(3, &s.InodeSymlink)
	stateSourceObject.Load(4, &s.pidns)
}

func (s *threadSelfSymlink) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.threadSelfSymlink"
}

func (s *threadSelfSymlink) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAttrs",
		"InodeNoopRefCount",
		"InodeSymlink",
		"pidns",
	}
}

func (s *threadSelfSymlink) beforeSave() {}

func (s *threadSelfSymlink) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.implStatFS)
	stateSinkObject.Save(1, &s.InodeAttrs)
	stateSinkObject.Save(2, &s.InodeNoopRefCount)
	stateSinkObject.Save(3, &s.InodeSymlink)
	stateSinkObject.Save(4, &s.pidns)
}

func (s *threadSelfSymlink) afterLoad() {}

func (s *threadSelfSymlink) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.implStatFS)
	stateSourceObject.Load(1, &s.InodeAttrs)
	stateSourceObject.Load(2, &s.InodeNoopRefCount)
	stateSourceObject.Load(3, &s.InodeSymlink)
	stateSourceObject.Load(4, &s.pidns)
}

func (d *dynamicBytesFileSetAttr) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.dynamicBytesFileSetAttr"
}

func (d *dynamicBytesFileSetAttr) StateFields() []string {
	return []string{
		"DynamicBytesFile",
	}
}

func (d *dynamicBytesFileSetAttr) beforeSave() {}

func (d *dynamicBytesFileSetAttr) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
}

func (d *dynamicBytesFileSetAttr) afterLoad() {}

func (d *dynamicBytesFileSetAttr) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
}

func (c *cpuStats) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.cpuStats"
}

func (c *cpuStats) StateFields() []string {
	return []string{
		"user",
		"nice",
		"system",
		"idle",
		"ioWait",
		"irq",
		"softirq",
		"steal",
		"guest",
		"guestNice",
	}
}

func (c *cpuStats) beforeSave() {}

func (c *cpuStats) StateSave(stateSinkObject state.Sink) {
	c.beforeSave()
	stateSinkObject.Save(0, &c.user)
	stateSinkObject.Save(1, &c.nice)
	stateSinkObject.Save(2, &c.system)
	stateSinkObject.Save(3, &c.idle)
	stateSinkObject.Save(4, &c.ioWait)
	stateSinkObject.Save(5, &c.irq)
	stateSinkObject.Save(6, &c.softirq)
	stateSinkObject.Save(7, &c.steal)
	stateSinkObject.Save(8, &c.guest)
	stateSinkObject.Save(9, &c.guestNice)
}

func (c *cpuStats) afterLoad() {}

func (c *cpuStats) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &c.user)
	stateSourceObject.Load(1, &c.nice)
	stateSourceObject.Load(2, &c.system)
	stateSourceObject.Load(3, &c.idle)
	stateSourceObject.Load(4, &c.ioWait)
	stateSourceObject.Load(5, &c.irq)
	stateSourceObject.Load(6, &c.softirq)
	stateSourceObject.Load(7, &c.steal)
	stateSourceObject.Load(8, &c.guest)
	stateSourceObject.Load(9, &c.guestNice)
}

func (s *statData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.statData"
}

func (s *statData) StateFields() []string {
	return []string{
		"dynamicBytesFileSetAttr",
	}
}

func (s *statData) beforeSave() {}

func (s *statData) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.dynamicBytesFileSetAttr)
}

func (s *statData) afterLoad() {}

func (s *statData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.dynamicBytesFileSetAttr)
}

func (l *loadavgData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.loadavgData"
}

func (l *loadavgData) StateFields() []string {
	return []string{
		"dynamicBytesFileSetAttr",
	}
}

func (l *loadavgData) beforeSave() {}

func (l *loadavgData) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	stateSinkObject.Save(0, &l.dynamicBytesFileSetAttr)
}

func (l *loadavgData) afterLoad() {}

func (l *loadavgData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.dynamicBytesFileSetAttr)
}

func (m *meminfoData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.meminfoData"
}

func (m *meminfoData) StateFields() []string {
	return []string{
		"dynamicBytesFileSetAttr",
	}
}

func (m *meminfoData) beforeSave() {}

func (m *meminfoData) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	stateSinkObject.Save(0, &m.dynamicBytesFileSetAttr)
}

func (m *meminfoData) afterLoad() {}

func (m *meminfoData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.dynamicBytesFileSetAttr)
}

func (u *uptimeData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.uptimeData"
}

func (u *uptimeData) StateFields() []string {
	return []string{
		"dynamicBytesFileSetAttr",
	}
}

func (u *uptimeData) beforeSave() {}

func (u *uptimeData) StateSave(stateSinkObject state.Sink) {
	u.beforeSave()
	stateSinkObject.Save(0, &u.dynamicBytesFileSetAttr)
}

func (u *uptimeData) afterLoad() {}

func (u *uptimeData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &u.dynamicBytesFileSetAttr)
}

func (v *versionData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.versionData"
}

func (v *versionData) StateFields() []string {
	return []string{
		"dynamicBytesFileSetAttr",
	}
}

func (v *versionData) beforeSave() {}

func (v *versionData) StateSave(stateSinkObject state.Sink) {
	v.beforeSave()
	stateSinkObject.Save(0, &v.dynamicBytesFileSetAttr)
}

func (v *versionData) afterLoad() {}

func (v *versionData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &v.dynamicBytesFileSetAttr)
}

func (d *filesystemsData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.filesystemsData"
}

func (d *filesystemsData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
	}
}

func (d *filesystemsData) beforeSave() {}

func (d *filesystemsData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
}

func (d *filesystemsData) afterLoad() {}

func (d *filesystemsData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
}

func (r *tasksInodeRefs) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.tasksInodeRefs"
}

func (r *tasksInodeRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (r *tasksInodeRefs) beforeSave() {}

func (r *tasksInodeRefs) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.refCount)
}

func (r *tasksInodeRefs) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.refCount)
	stateSourceObject.AfterLoad(r.afterLoad)
}

func (t *tcpMemDir) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.tcpMemDir"
}

func (t *tcpMemDir) StateFields() []string {
	return nil
}

func (d *mmapMinAddrData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.mmapMinAddrData"
}

func (d *mmapMinAddrData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"k",
	}
}

func (d *mmapMinAddrData) beforeSave() {}

func (d *mmapMinAddrData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.k)
}

func (d *mmapMinAddrData) afterLoad() {}

func (d *mmapMinAddrData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.k)
}

func (h *hostnameData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.hostnameData"
}

func (h *hostnameData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
	}
}

func (h *hostnameData) beforeSave() {}

func (h *hostnameData) StateSave(stateSinkObject state.Sink) {
	h.beforeSave()
	stateSinkObject.Save(0, &h.DynamicBytesFile)
}

func (h *hostnameData) afterLoad() {}

func (h *hostnameData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &h.DynamicBytesFile)
}

func (d *tcpSackData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.tcpSackData"
}

func (d *tcpSackData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"stack",
		"enabled",
	}
}

func (d *tcpSackData) beforeSave() {}

func (d *tcpSackData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.stack)
	stateSinkObject.Save(2, &d.enabled)
}

func (d *tcpSackData) afterLoad() {}

func (d *tcpSackData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.LoadWait(1, &d.stack)
	stateSourceObject.Load(2, &d.enabled)
}

func (d *tcpRecoveryData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.tcpRecoveryData"
}

func (d *tcpRecoveryData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"stack",
	}
}

func (d *tcpRecoveryData) beforeSave() {}

func (d *tcpRecoveryData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.stack)
}

func (d *tcpRecoveryData) afterLoad() {}

func (d *tcpRecoveryData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.LoadWait(1, &d.stack)
}

func (d *tcpMemData) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.tcpMemData"
}

func (d *tcpMemData) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"dir",
		"stack",
	}
}

func (d *tcpMemData) beforeSave() {}

func (d *tcpMemData) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.DynamicBytesFile)
	stateSinkObject.Save(1, &d.dir)
	stateSinkObject.Save(2, &d.stack)
}

func (d *tcpMemData) afterLoad() {}

func (d *tcpMemData) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.DynamicBytesFile)
	stateSourceObject.Load(1, &d.dir)
	stateSourceObject.LoadWait(2, &d.stack)
}

func (ipf *ipForwarding) StateTypeName() string {
	return "pkg/sentry/fsimpl/proc.ipForwarding"
}

func (ipf *ipForwarding) StateFields() []string {
	return []string{
		"DynamicBytesFile",
		"stack",
		"enabled",
	}
}

func (ipf *ipForwarding) beforeSave() {}

func (ipf *ipForwarding) StateSave(stateSinkObject state.Sink) {
	ipf.beforeSave()
	stateSinkObject.Save(0, &ipf.DynamicBytesFile)
	stateSinkObject.Save(1, &ipf.stack)
	stateSinkObject.Save(2, &ipf.enabled)
}

func (ipf *ipForwarding) afterLoad() {}

func (ipf *ipForwarding) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &ipf.DynamicBytesFile)
	stateSourceObject.LoadWait(1, &ipf.stack)
	stateSourceObject.Load(2, &ipf.enabled)
}

func init() {
	state.Register((*fdDirInodeRefs)(nil))
	state.Register((*fdInfoDirInodeRefs)(nil))
	state.Register((*FilesystemType)(nil))
	state.Register((*filesystem)(nil))
	state.Register((*staticFile)(nil))
	state.Register((*InternalData)(nil))
	state.Register((*implStatFS)(nil))
	state.Register((*subtasksInode)(nil))
	state.Register((*subtasksFD)(nil))
	state.Register((*subtasksInodeRefs)(nil))
	state.Register((*taskInode)(nil))
	state.Register((*taskOwnedInode)(nil))
	state.Register((*fdDir)(nil))
	state.Register((*fdDirInode)(nil))
	state.Register((*fdSymlink)(nil))
	state.Register((*fdInfoDirInode)(nil))
	state.Register((*fdInfoData)(nil))
	state.Register((*auxvData)(nil))
	state.Register((*cmdlineData)(nil))
	state.Register((*commInode)(nil))
	state.Register((*commData)(nil))
	state.Register((*idMapData)(nil))
	state.Register((*memInode)(nil))
	state.Register((*memFD)(nil))
	state.Register((*mapsData)(nil))
	state.Register((*smapsData)(nil))
	state.Register((*taskStatData)(nil))
	state.Register((*statmData)(nil))
	state.Register((*statusData)(nil))
	state.Register((*ioData)(nil))
	state.Register((*oomScoreAdj)(nil))
	state.Register((*exeSymlink)(nil))
	state.Register((*cwdSymlink)(nil))
	state.Register((*mountInfoData)(nil))
	state.Register((*mountsData)(nil))
	state.Register((*namespaceSymlink)(nil))
	state.Register((*namespaceInode)(nil))
	state.Register((*namespaceFD)(nil))
	state.Register((*taskInodeRefs)(nil))
	state.Register((*ifinet6)(nil))
	state.Register((*netDevData)(nil))
	state.Register((*netUnixData)(nil))
	state.Register((*netTCPData)(nil))
	state.Register((*netTCP6Data)(nil))
	state.Register((*netUDPData)(nil))
	state.Register((*netSnmpData)(nil))
	state.Register((*snmpLine)(nil))
	state.Register((*netRouteData)(nil))
	state.Register((*netStatData)(nil))
	state.Register((*tasksInode)(nil))
	state.Register((*staticFileSetStat)(nil))
	state.Register((*selfSymlink)(nil))
	state.Register((*threadSelfSymlink)(nil))
	state.Register((*dynamicBytesFileSetAttr)(nil))
	state.Register((*cpuStats)(nil))
	state.Register((*statData)(nil))
	state.Register((*loadavgData)(nil))
	state.Register((*meminfoData)(nil))
	state.Register((*uptimeData)(nil))
	state.Register((*versionData)(nil))
	state.Register((*filesystemsData)(nil))
	state.Register((*tasksInodeRefs)(nil))
	state.Register((*tcpMemDir)(nil))
	state.Register((*mmapMinAddrData)(nil))
	state.Register((*hostnameData)(nil))
	state.Register((*tcpSackData)(nil))
	state.Register((*tcpRecoveryData)(nil))
	state.Register((*tcpMemData)(nil))
	state.Register((*ipForwarding)(nil))
}
