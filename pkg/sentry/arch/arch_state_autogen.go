// automatically generated by stateify.

// +build 386 amd64 arm64

package arch

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *MmapLayout) StateTypeName() string {
	return "pkg/sentry/arch.MmapLayout"
}

func (x *MmapLayout) StateFields() []string {
	return []string{
		"MinAddr",
		"MaxAddr",
		"BottomUpBase",
		"TopDownBase",
		"DefaultDirection",
		"MaxStackRand",
	}
}

func (x *MmapLayout) beforeSave() {}

func (x *MmapLayout) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.MinAddr)
	m.Save(1, &x.MaxAddr)
	m.Save(2, &x.BottomUpBase)
	m.Save(3, &x.TopDownBase)
	m.Save(4, &x.DefaultDirection)
	m.Save(5, &x.MaxStackRand)
}

func (x *MmapLayout) afterLoad() {}

func (x *MmapLayout) StateLoad(m state.Source) {
	m.Load(0, &x.MinAddr)
	m.Load(1, &x.MaxAddr)
	m.Load(2, &x.BottomUpBase)
	m.Load(3, &x.TopDownBase)
	m.Load(4, &x.DefaultDirection)
	m.Load(5, &x.MaxStackRand)
}

func (x *AuxEntry) StateTypeName() string {
	return "pkg/sentry/arch.AuxEntry"
}

func (x *AuxEntry) StateFields() []string {
	return []string{
		"Key",
		"Value",
	}
}

func (x *AuxEntry) beforeSave() {}

func (x *AuxEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Key)
	m.Save(1, &x.Value)
}

func (x *AuxEntry) afterLoad() {}

func (x *AuxEntry) StateLoad(m state.Source) {
	m.Load(0, &x.Key)
	m.Load(1, &x.Value)
}

func (x *SignalAct) StateTypeName() string {
	return "pkg/sentry/arch.SignalAct"
}

func (x *SignalAct) StateFields() []string {
	return []string{
		"Handler",
		"Flags",
		"Restorer",
		"Mask",
	}
}

func (x *SignalAct) beforeSave() {}

func (x *SignalAct) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Handler)
	m.Save(1, &x.Flags)
	m.Save(2, &x.Restorer)
	m.Save(3, &x.Mask)
}

func (x *SignalAct) afterLoad() {}

func (x *SignalAct) StateLoad(m state.Source) {
	m.Load(0, &x.Handler)
	m.Load(1, &x.Flags)
	m.Load(2, &x.Restorer)
	m.Load(3, &x.Mask)
}

func (x *SignalStack) StateTypeName() string {
	return "pkg/sentry/arch.SignalStack"
}

func (x *SignalStack) StateFields() []string {
	return []string{
		"Addr",
		"Flags",
		"Size",
	}
}

func (x *SignalStack) beforeSave() {}

func (x *SignalStack) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Addr)
	m.Save(1, &x.Flags)
	m.Save(2, &x.Size)
}

func (x *SignalStack) afterLoad() {}

func (x *SignalStack) StateLoad(m state.Source) {
	m.Load(0, &x.Addr)
	m.Load(1, &x.Flags)
	m.Load(2, &x.Size)
}

func (x *SignalInfo) StateTypeName() string {
	return "pkg/sentry/arch.SignalInfo"
}

func (x *SignalInfo) StateFields() []string {
	return []string{
		"Signo",
		"Errno",
		"Code",
		"Fields",
	}
}

func (x *SignalInfo) beforeSave() {}

func (x *SignalInfo) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Signo)
	m.Save(1, &x.Errno)
	m.Save(2, &x.Code)
	m.Save(3, &x.Fields)
}

func (x *SignalInfo) afterLoad() {}

func (x *SignalInfo) StateLoad(m state.Source) {
	m.Load(0, &x.Signo)
	m.Load(1, &x.Errno)
	m.Load(2, &x.Code)
	m.Load(3, &x.Fields)
}

func init() {
	state.Register((*MmapLayout)(nil))
	state.Register((*AuxEntry)(nil))
	state.Register((*SignalAct)(nil))
	state.Register((*SignalStack)(nil))
	state.Register((*SignalInfo)(nil))
}
