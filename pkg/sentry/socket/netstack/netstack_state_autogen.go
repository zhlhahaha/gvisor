// automatically generated by stateify.

package netstack

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *SocketOperations) StateTypeName() string {
	return "pkg/sentry/socket/netstack.SocketOperations"
}

func (x *SocketOperations) StateFields() []string {
	return []string{
		"socketOpsCommon",
	}
}

func (x *SocketOperations) beforeSave() {}

func (x *SocketOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.socketOpsCommon)
}

func (x *SocketOperations) afterLoad() {}

func (x *SocketOperations) StateLoad(m state.Source) {
	m.Load(0, &x.socketOpsCommon)
}

func (x *socketOpsCommon) StateTypeName() string {
	return "pkg/sentry/socket/netstack.socketOpsCommon"
}

func (x *socketOpsCommon) StateFields() []string {
	return []string{
		"SendReceiveTimeout",
		"Queue",
		"family",
		"Endpoint",
		"skType",
		"protocol",
		"readViewHasData",
		"readView",
		"readCM",
		"sender",
		"linkPacketInfo",
		"sockOptTimestamp",
		"timestampValid",
		"timestampNS",
		"sockOptInq",
	}
}

func (x *socketOpsCommon) beforeSave() {}

func (x *socketOpsCommon) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SendReceiveTimeout)
	m.Save(1, &x.Queue)
	m.Save(2, &x.family)
	m.Save(3, &x.Endpoint)
	m.Save(4, &x.skType)
	m.Save(5, &x.protocol)
	m.Save(6, &x.readViewHasData)
	m.Save(7, &x.readView)
	m.Save(8, &x.readCM)
	m.Save(9, &x.sender)
	m.Save(10, &x.linkPacketInfo)
	m.Save(11, &x.sockOptTimestamp)
	m.Save(12, &x.timestampValid)
	m.Save(13, &x.timestampNS)
	m.Save(14, &x.sockOptInq)
}

func (x *socketOpsCommon) afterLoad() {}

func (x *socketOpsCommon) StateLoad(m state.Source) {
	m.Load(0, &x.SendReceiveTimeout)
	m.Load(1, &x.Queue)
	m.Load(2, &x.family)
	m.Load(3, &x.Endpoint)
	m.Load(4, &x.skType)
	m.Load(5, &x.protocol)
	m.Load(6, &x.readViewHasData)
	m.Load(7, &x.readView)
	m.Load(8, &x.readCM)
	m.Load(9, &x.sender)
	m.Load(10, &x.linkPacketInfo)
	m.Load(11, &x.sockOptTimestamp)
	m.Load(12, &x.timestampValid)
	m.Load(13, &x.timestampNS)
	m.Load(14, &x.sockOptInq)
}

func (x *Stack) StateTypeName() string {
	return "pkg/sentry/socket/netstack.Stack"
}

func (x *Stack) StateFields() []string {
	return []string{}
}

func (x *Stack) beforeSave() {}

func (x *Stack) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *Stack) StateLoad(m state.Source) {
	m.AfterLoad(x.afterLoad)
}

func init() {
	state.Register((*SocketOperations)(nil))
	state.Register((*socketOpsCommon)(nil))
	state.Register((*Stack)(nil))
}
