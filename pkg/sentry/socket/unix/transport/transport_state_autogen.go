// automatically generated by stateify.

package transport

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *connectionedEndpoint) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.connectionedEndpoint"
}

func (x *connectionedEndpoint) StateFields() []string {
	return []string{
		"baseEndpoint",
		"id",
		"idGenerator",
		"stype",
		"acceptedChan",
	}
}

func (x *connectionedEndpoint) beforeSave() {}

func (x *connectionedEndpoint) StateSave(m state.Sink) {
	x.beforeSave()
	var acceptedChan []*connectionedEndpoint = x.saveAcceptedChan()
	m.SaveValue(4, acceptedChan)
	m.Save(0, &x.baseEndpoint)
	m.Save(1, &x.id)
	m.Save(2, &x.idGenerator)
	m.Save(3, &x.stype)
}

func (x *connectionedEndpoint) afterLoad() {}

func (x *connectionedEndpoint) StateLoad(m state.Source) {
	m.Load(0, &x.baseEndpoint)
	m.Load(1, &x.id)
	m.Load(2, &x.idGenerator)
	m.Load(3, &x.stype)
	m.LoadValue(4, new([]*connectionedEndpoint), func(y interface{}) { x.loadAcceptedChan(y.([]*connectionedEndpoint)) })
}

func (x *connectionlessEndpoint) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.connectionlessEndpoint"
}

func (x *connectionlessEndpoint) StateFields() []string {
	return []string{
		"baseEndpoint",
	}
}

func (x *connectionlessEndpoint) beforeSave() {}

func (x *connectionlessEndpoint) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.baseEndpoint)
}

func (x *connectionlessEndpoint) afterLoad() {}

func (x *connectionlessEndpoint) StateLoad(m state.Source) {
	m.Load(0, &x.baseEndpoint)
}

func (x *queue) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.queue"
}

func (x *queue) StateFields() []string {
	return []string{
		"queueRefs",
		"ReaderQueue",
		"WriterQueue",
		"closed",
		"unread",
		"used",
		"limit",
		"dataList",
	}
}

func (x *queue) beforeSave() {}

func (x *queue) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.queueRefs)
	m.Save(1, &x.ReaderQueue)
	m.Save(2, &x.WriterQueue)
	m.Save(3, &x.closed)
	m.Save(4, &x.unread)
	m.Save(5, &x.used)
	m.Save(6, &x.limit)
	m.Save(7, &x.dataList)
}

func (x *queue) afterLoad() {}

func (x *queue) StateLoad(m state.Source) {
	m.Load(0, &x.queueRefs)
	m.Load(1, &x.ReaderQueue)
	m.Load(2, &x.WriterQueue)
	m.Load(3, &x.closed)
	m.Load(4, &x.unread)
	m.Load(5, &x.used)
	m.Load(6, &x.limit)
	m.Load(7, &x.dataList)
}

func (x *queueRefs) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.queueRefs"
}

func (x *queueRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (x *queueRefs) beforeSave() {}

func (x *queueRefs) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.refCount)
}

func (x *queueRefs) afterLoad() {}

func (x *queueRefs) StateLoad(m state.Source) {
	m.Load(0, &x.refCount)
}

func (x *messageList) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.messageList"
}

func (x *messageList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (x *messageList) beforeSave() {}

func (x *messageList) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.head)
	m.Save(1, &x.tail)
}

func (x *messageList) afterLoad() {}

func (x *messageList) StateLoad(m state.Source) {
	m.Load(0, &x.head)
	m.Load(1, &x.tail)
}

func (x *messageEntry) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.messageEntry"
}

func (x *messageEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (x *messageEntry) beforeSave() {}

func (x *messageEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.next)
	m.Save(1, &x.prev)
}

func (x *messageEntry) afterLoad() {}

func (x *messageEntry) StateLoad(m state.Source) {
	m.Load(0, &x.next)
	m.Load(1, &x.prev)
}

func (x *ControlMessages) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.ControlMessages"
}

func (x *ControlMessages) StateFields() []string {
	return []string{
		"Rights",
		"Credentials",
	}
}

func (x *ControlMessages) beforeSave() {}

func (x *ControlMessages) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Rights)
	m.Save(1, &x.Credentials)
}

func (x *ControlMessages) afterLoad() {}

func (x *ControlMessages) StateLoad(m state.Source) {
	m.Load(0, &x.Rights)
	m.Load(1, &x.Credentials)
}

func (x *message) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.message"
}

func (x *message) StateFields() []string {
	return []string{
		"messageEntry",
		"Data",
		"Control",
		"Address",
	}
}

func (x *message) beforeSave() {}

func (x *message) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.messageEntry)
	m.Save(1, &x.Data)
	m.Save(2, &x.Control)
	m.Save(3, &x.Address)
}

func (x *message) afterLoad() {}

func (x *message) StateLoad(m state.Source) {
	m.Load(0, &x.messageEntry)
	m.Load(1, &x.Data)
	m.Load(2, &x.Control)
	m.Load(3, &x.Address)
}

func (x *queueReceiver) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.queueReceiver"
}

func (x *queueReceiver) StateFields() []string {
	return []string{
		"readQueue",
	}
}

func (x *queueReceiver) beforeSave() {}

func (x *queueReceiver) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.readQueue)
}

func (x *queueReceiver) afterLoad() {}

func (x *queueReceiver) StateLoad(m state.Source) {
	m.Load(0, &x.readQueue)
}

func (x *streamQueueReceiver) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.streamQueueReceiver"
}

func (x *streamQueueReceiver) StateFields() []string {
	return []string{
		"queueReceiver",
		"buffer",
		"control",
		"addr",
	}
}

func (x *streamQueueReceiver) beforeSave() {}

func (x *streamQueueReceiver) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.queueReceiver)
	m.Save(1, &x.buffer)
	m.Save(2, &x.control)
	m.Save(3, &x.addr)
}

func (x *streamQueueReceiver) afterLoad() {}

func (x *streamQueueReceiver) StateLoad(m state.Source) {
	m.Load(0, &x.queueReceiver)
	m.Load(1, &x.buffer)
	m.Load(2, &x.control)
	m.Load(3, &x.addr)
}

func (x *connectedEndpoint) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.connectedEndpoint"
}

func (x *connectedEndpoint) StateFields() []string {
	return []string{
		"endpoint",
		"writeQueue",
	}
}

func (x *connectedEndpoint) beforeSave() {}

func (x *connectedEndpoint) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.endpoint)
	m.Save(1, &x.writeQueue)
}

func (x *connectedEndpoint) afterLoad() {}

func (x *connectedEndpoint) StateLoad(m state.Source) {
	m.Load(0, &x.endpoint)
	m.Load(1, &x.writeQueue)
}

func (x *baseEndpoint) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.baseEndpoint"
}

func (x *baseEndpoint) StateFields() []string {
	return []string{
		"Queue",
		"passcred",
		"receiver",
		"connected",
		"path",
		"linger",
	}
}

func (x *baseEndpoint) beforeSave() {}

func (x *baseEndpoint) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Queue)
	m.Save(1, &x.passcred)
	m.Save(2, &x.receiver)
	m.Save(3, &x.connected)
	m.Save(4, &x.path)
	m.Save(5, &x.linger)
}

func (x *baseEndpoint) afterLoad() {}

func (x *baseEndpoint) StateLoad(m state.Source) {
	m.Load(0, &x.Queue)
	m.Load(1, &x.passcred)
	m.Load(2, &x.receiver)
	m.Load(3, &x.connected)
	m.Load(4, &x.path)
	m.Load(5, &x.linger)
}

func init() {
	state.Register((*connectionedEndpoint)(nil))
	state.Register((*connectionlessEndpoint)(nil))
	state.Register((*queue)(nil))
	state.Register((*queueRefs)(nil))
	state.Register((*messageList)(nil))
	state.Register((*messageEntry)(nil))
	state.Register((*ControlMessages)(nil))
	state.Register((*message)(nil))
	state.Register((*queueReceiver)(nil))
	state.Register((*streamQueueReceiver)(nil))
	state.Register((*connectedEndpoint)(nil))
	state.Register((*baseEndpoint)(nil))
}
