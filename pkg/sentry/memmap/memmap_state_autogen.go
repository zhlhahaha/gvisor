// automatically generated by stateify.

package memmap

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *FileRange) StateTypeName() string {
	return "pkg/sentry/memmap.FileRange"
}

func (x *FileRange) StateFields() []string {
	return []string{
		"Start",
		"End",
	}
}

func (x *FileRange) beforeSave() {}

func (x *FileRange) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Start)
	m.Save(1, &x.End)
}

func (x *FileRange) afterLoad() {}

func (x *FileRange) StateLoad(m state.Source) {
	m.Load(0, &x.Start)
	m.Load(1, &x.End)
}

func (x *MappableRange) StateTypeName() string {
	return "pkg/sentry/memmap.MappableRange"
}

func (x *MappableRange) StateFields() []string {
	return []string{
		"Start",
		"End",
	}
}

func (x *MappableRange) beforeSave() {}

func (x *MappableRange) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Start)
	m.Save(1, &x.End)
}

func (x *MappableRange) afterLoad() {}

func (x *MappableRange) StateLoad(m state.Source) {
	m.Load(0, &x.Start)
	m.Load(1, &x.End)
}

func (x *MappingOfRange) StateTypeName() string {
	return "pkg/sentry/memmap.MappingOfRange"
}

func (x *MappingOfRange) StateFields() []string {
	return []string{
		"MappingSpace",
		"AddrRange",
		"Writable",
	}
}

func (x *MappingOfRange) beforeSave() {}

func (x *MappingOfRange) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.MappingSpace)
	m.Save(1, &x.AddrRange)
	m.Save(2, &x.Writable)
}

func (x *MappingOfRange) afterLoad() {}

func (x *MappingOfRange) StateLoad(m state.Source) {
	m.Load(0, &x.MappingSpace)
	m.Load(1, &x.AddrRange)
	m.Load(2, &x.Writable)
}

func init() {
	state.Register((*FileRange)(nil))
	state.Register((*MappableRange)(nil))
	state.Register((*MappingOfRange)(nil))
}
