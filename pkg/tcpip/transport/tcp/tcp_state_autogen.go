// automatically generated by stateify.

package tcp

import (
	"gvisor.dev/gvisor/pkg/state"
	"gvisor.dev/gvisor/pkg/tcpip/buffer"
)

func (x *cubicState) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.cubicState"
}

func (x *cubicState) StateFields() []string {
	return []string{
		"wLastMax",
		"wMax",
		"t",
		"numCongestionEvents",
		"c",
		"k",
		"beta",
		"wC",
		"wEst",
		"s",
	}
}

func (x *cubicState) beforeSave() {}

func (x *cubicState) StateSave(m state.Sink) {
	x.beforeSave()
	var t unixTime = x.saveT()
	m.SaveValue(2, t)
	m.Save(0, &x.wLastMax)
	m.Save(1, &x.wMax)
	m.Save(3, &x.numCongestionEvents)
	m.Save(4, &x.c)
	m.Save(5, &x.k)
	m.Save(6, &x.beta)
	m.Save(7, &x.wC)
	m.Save(8, &x.wEst)
	m.Save(9, &x.s)
}

func (x *cubicState) afterLoad() {}

func (x *cubicState) StateLoad(m state.Source) {
	m.Load(0, &x.wLastMax)
	m.Load(1, &x.wMax)
	m.Load(3, &x.numCongestionEvents)
	m.Load(4, &x.c)
	m.Load(5, &x.k)
	m.Load(6, &x.beta)
	m.Load(7, &x.wC)
	m.Load(8, &x.wEst)
	m.Load(9, &x.s)
	m.LoadValue(2, new(unixTime), func(y interface{}) { x.loadT(y.(unixTime)) })
}

func (x *SACKInfo) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.SACKInfo"
}

func (x *SACKInfo) StateFields() []string {
	return []string{
		"Blocks",
		"NumBlocks",
	}
}

func (x *SACKInfo) beforeSave() {}

func (x *SACKInfo) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Blocks)
	m.Save(1, &x.NumBlocks)
}

func (x *SACKInfo) afterLoad() {}

func (x *SACKInfo) StateLoad(m state.Source) {
	m.Load(0, &x.Blocks)
	m.Load(1, &x.NumBlocks)
}

func (x *rcvBufAutoTuneParams) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.rcvBufAutoTuneParams"
}

func (x *rcvBufAutoTuneParams) StateFields() []string {
	return []string{
		"measureTime",
		"copied",
		"prevCopied",
		"rtt",
		"rttMeasureSeqNumber",
		"rttMeasureTime",
		"disabled",
	}
}

func (x *rcvBufAutoTuneParams) beforeSave() {}

func (x *rcvBufAutoTuneParams) StateSave(m state.Sink) {
	x.beforeSave()
	var measureTime unixTime = x.saveMeasureTime()
	m.SaveValue(0, measureTime)
	var rttMeasureTime unixTime = x.saveRttMeasureTime()
	m.SaveValue(5, rttMeasureTime)
	m.Save(1, &x.copied)
	m.Save(2, &x.prevCopied)
	m.Save(3, &x.rtt)
	m.Save(4, &x.rttMeasureSeqNumber)
	m.Save(6, &x.disabled)
}

func (x *rcvBufAutoTuneParams) afterLoad() {}

func (x *rcvBufAutoTuneParams) StateLoad(m state.Source) {
	m.Load(1, &x.copied)
	m.Load(2, &x.prevCopied)
	m.Load(3, &x.rtt)
	m.Load(4, &x.rttMeasureSeqNumber)
	m.Load(6, &x.disabled)
	m.LoadValue(0, new(unixTime), func(y interface{}) { x.loadMeasureTime(y.(unixTime)) })
	m.LoadValue(5, new(unixTime), func(y interface{}) { x.loadRttMeasureTime(y.(unixTime)) })
}

func (x *EndpointInfo) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.EndpointInfo"
}

func (x *EndpointInfo) StateFields() []string {
	return []string{
		"TransportEndpointInfo",
		"HardError",
	}
}

func (x *EndpointInfo) beforeSave() {}

func (x *EndpointInfo) StateSave(m state.Sink) {
	x.beforeSave()
	var HardError string = x.saveHardError()
	m.SaveValue(1, HardError)
	m.Save(0, &x.TransportEndpointInfo)
}

func (x *EndpointInfo) afterLoad() {}

func (x *EndpointInfo) StateLoad(m state.Source) {
	m.Load(0, &x.TransportEndpointInfo)
	m.LoadValue(1, new(string), func(y interface{}) { x.loadHardError(y.(string)) })
}

func (x *endpoint) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.endpoint"
}

func (x *endpoint) StateFields() []string {
	return []string{
		"EndpointInfo",
		"waiterQueue",
		"uniqueID",
		"lastError",
		"rcvList",
		"rcvClosed",
		"rcvBufSize",
		"rcvBufUsed",
		"rcvAutoParams",
		"ownedByUser",
		"state",
		"boundNICID",
		"ttl",
		"v6only",
		"isConnectNotified",
		"broadcast",
		"portFlags",
		"boundBindToDevice",
		"boundPortFlags",
		"boundDest",
		"effectiveNetProtos",
		"workerRunning",
		"workerCleanup",
		"sendTSOk",
		"recentTS",
		"recentTSTime",
		"tsOffset",
		"shutdownFlags",
		"sackPermitted",
		"sack",
		"bindToDevice",
		"delay",
		"cork",
		"scoreboard",
		"slowAck",
		"segmentQueue",
		"synRcvdCount",
		"userMSS",
		"maxSynRetries",
		"windowClamp",
		"sndBufSize",
		"sndBufUsed",
		"sndClosed",
		"sndBufInQueue",
		"sndQueue",
		"cc",
		"packetTooBigCount",
		"sndMTU",
		"keepalive",
		"userTimeout",
		"deferAccept",
		"acceptedChan",
		"rcv",
		"snd",
		"connectingAddress",
		"amss",
		"sendTOS",
		"gso",
		"tcpLingerTimeout",
		"closed",
		"txHash",
		"owner",
		"linger",
	}
}

func (x *endpoint) StateSave(m state.Sink) {
	x.beforeSave()
	var lastError string = x.saveLastError()
	m.SaveValue(3, lastError)
	var state EndpointState = x.saveState()
	m.SaveValue(10, state)
	var recentTSTime unixTime = x.saveRecentTSTime()
	m.SaveValue(25, recentTSTime)
	var acceptedChan []*endpoint = x.saveAcceptedChan()
	m.SaveValue(51, acceptedChan)
	m.Save(0, &x.EndpointInfo)
	m.Save(1, &x.waiterQueue)
	m.Save(2, &x.uniqueID)
	m.Save(4, &x.rcvList)
	m.Save(5, &x.rcvClosed)
	m.Save(6, &x.rcvBufSize)
	m.Save(7, &x.rcvBufUsed)
	m.Save(8, &x.rcvAutoParams)
	m.Save(9, &x.ownedByUser)
	m.Save(11, &x.boundNICID)
	m.Save(12, &x.ttl)
	m.Save(13, &x.v6only)
	m.Save(14, &x.isConnectNotified)
	m.Save(15, &x.broadcast)
	m.Save(16, &x.portFlags)
	m.Save(17, &x.boundBindToDevice)
	m.Save(18, &x.boundPortFlags)
	m.Save(19, &x.boundDest)
	m.Save(20, &x.effectiveNetProtos)
	m.Save(21, &x.workerRunning)
	m.Save(22, &x.workerCleanup)
	m.Save(23, &x.sendTSOk)
	m.Save(24, &x.recentTS)
	m.Save(26, &x.tsOffset)
	m.Save(27, &x.shutdownFlags)
	m.Save(28, &x.sackPermitted)
	m.Save(29, &x.sack)
	m.Save(30, &x.bindToDevice)
	m.Save(31, &x.delay)
	m.Save(32, &x.cork)
	m.Save(33, &x.scoreboard)
	m.Save(34, &x.slowAck)
	m.Save(35, &x.segmentQueue)
	m.Save(36, &x.synRcvdCount)
	m.Save(37, &x.userMSS)
	m.Save(38, &x.maxSynRetries)
	m.Save(39, &x.windowClamp)
	m.Save(40, &x.sndBufSize)
	m.Save(41, &x.sndBufUsed)
	m.Save(42, &x.sndClosed)
	m.Save(43, &x.sndBufInQueue)
	m.Save(44, &x.sndQueue)
	m.Save(45, &x.cc)
	m.Save(46, &x.packetTooBigCount)
	m.Save(47, &x.sndMTU)
	m.Save(48, &x.keepalive)
	m.Save(49, &x.userTimeout)
	m.Save(50, &x.deferAccept)
	m.Save(52, &x.rcv)
	m.Save(53, &x.snd)
	m.Save(54, &x.connectingAddress)
	m.Save(55, &x.amss)
	m.Save(56, &x.sendTOS)
	m.Save(57, &x.gso)
	m.Save(58, &x.tcpLingerTimeout)
	m.Save(59, &x.closed)
	m.Save(60, &x.txHash)
	m.Save(61, &x.owner)
	m.Save(62, &x.linger)
}

func (x *endpoint) StateLoad(m state.Source) {
	m.Load(0, &x.EndpointInfo)
	m.LoadWait(1, &x.waiterQueue)
	m.Load(2, &x.uniqueID)
	m.LoadWait(4, &x.rcvList)
	m.Load(5, &x.rcvClosed)
	m.Load(6, &x.rcvBufSize)
	m.Load(7, &x.rcvBufUsed)
	m.Load(8, &x.rcvAutoParams)
	m.Load(9, &x.ownedByUser)
	m.Load(11, &x.boundNICID)
	m.Load(12, &x.ttl)
	m.Load(13, &x.v6only)
	m.Load(14, &x.isConnectNotified)
	m.Load(15, &x.broadcast)
	m.Load(16, &x.portFlags)
	m.Load(17, &x.boundBindToDevice)
	m.Load(18, &x.boundPortFlags)
	m.Load(19, &x.boundDest)
	m.Load(20, &x.effectiveNetProtos)
	m.Load(21, &x.workerRunning)
	m.Load(22, &x.workerCleanup)
	m.Load(23, &x.sendTSOk)
	m.Load(24, &x.recentTS)
	m.Load(26, &x.tsOffset)
	m.Load(27, &x.shutdownFlags)
	m.Load(28, &x.sackPermitted)
	m.Load(29, &x.sack)
	m.Load(30, &x.bindToDevice)
	m.Load(31, &x.delay)
	m.Load(32, &x.cork)
	m.Load(33, &x.scoreboard)
	m.Load(34, &x.slowAck)
	m.LoadWait(35, &x.segmentQueue)
	m.Load(36, &x.synRcvdCount)
	m.Load(37, &x.userMSS)
	m.Load(38, &x.maxSynRetries)
	m.Load(39, &x.windowClamp)
	m.Load(40, &x.sndBufSize)
	m.Load(41, &x.sndBufUsed)
	m.Load(42, &x.sndClosed)
	m.Load(43, &x.sndBufInQueue)
	m.LoadWait(44, &x.sndQueue)
	m.Load(45, &x.cc)
	m.Load(46, &x.packetTooBigCount)
	m.Load(47, &x.sndMTU)
	m.Load(48, &x.keepalive)
	m.Load(49, &x.userTimeout)
	m.Load(50, &x.deferAccept)
	m.LoadWait(52, &x.rcv)
	m.LoadWait(53, &x.snd)
	m.Load(54, &x.connectingAddress)
	m.Load(55, &x.amss)
	m.Load(56, &x.sendTOS)
	m.Load(57, &x.gso)
	m.Load(58, &x.tcpLingerTimeout)
	m.Load(59, &x.closed)
	m.Load(60, &x.txHash)
	m.Load(61, &x.owner)
	m.Load(62, &x.linger)
	m.LoadValue(3, new(string), func(y interface{}) { x.loadLastError(y.(string)) })
	m.LoadValue(10, new(EndpointState), func(y interface{}) { x.loadState(y.(EndpointState)) })
	m.LoadValue(25, new(unixTime), func(y interface{}) { x.loadRecentTSTime(y.(unixTime)) })
	m.LoadValue(51, new([]*endpoint), func(y interface{}) { x.loadAcceptedChan(y.([]*endpoint)) })
	m.AfterLoad(x.afterLoad)
}

func (x *keepalive) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.keepalive"
}

func (x *keepalive) StateFields() []string {
	return []string{
		"enabled",
		"idle",
		"interval",
		"count",
		"unacked",
	}
}

func (x *keepalive) beforeSave() {}

func (x *keepalive) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.enabled)
	m.Save(1, &x.idle)
	m.Save(2, &x.interval)
	m.Save(3, &x.count)
	m.Save(4, &x.unacked)
}

func (x *keepalive) afterLoad() {}

func (x *keepalive) StateLoad(m state.Source) {
	m.Load(0, &x.enabled)
	m.Load(1, &x.idle)
	m.Load(2, &x.interval)
	m.Load(3, &x.count)
	m.Load(4, &x.unacked)
}

func (x *rackControl) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.rackControl"
}

func (x *rackControl) StateFields() []string {
	return []string{
		"xmitTime",
		"endSequence",
		"fack",
		"rtt",
	}
}

func (x *rackControl) beforeSave() {}

func (x *rackControl) StateSave(m state.Sink) {
	x.beforeSave()
	var xmitTime unixTime = x.saveXmitTime()
	m.SaveValue(0, xmitTime)
	m.Save(1, &x.endSequence)
	m.Save(2, &x.fack)
	m.Save(3, &x.rtt)
}

func (x *rackControl) afterLoad() {}

func (x *rackControl) StateLoad(m state.Source) {
	m.Load(1, &x.endSequence)
	m.Load(2, &x.fack)
	m.Load(3, &x.rtt)
	m.LoadValue(0, new(unixTime), func(y interface{}) { x.loadXmitTime(y.(unixTime)) })
}

func (x *receiver) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.receiver"
}

func (x *receiver) StateFields() []string {
	return []string{
		"ep",
		"rcvNxt",
		"rcvAcc",
		"rcvWnd",
		"rcvWndScale",
		"closed",
		"pendingRcvdSegments",
		"pendingBufUsed",
		"pendingBufSize",
		"lastRcvdAckTime",
	}
}

func (x *receiver) beforeSave() {}

func (x *receiver) StateSave(m state.Sink) {
	x.beforeSave()
	var lastRcvdAckTime unixTime = x.saveLastRcvdAckTime()
	m.SaveValue(9, lastRcvdAckTime)
	m.Save(0, &x.ep)
	m.Save(1, &x.rcvNxt)
	m.Save(2, &x.rcvAcc)
	m.Save(3, &x.rcvWnd)
	m.Save(4, &x.rcvWndScale)
	m.Save(5, &x.closed)
	m.Save(6, &x.pendingRcvdSegments)
	m.Save(7, &x.pendingBufUsed)
	m.Save(8, &x.pendingBufSize)
}

func (x *receiver) afterLoad() {}

func (x *receiver) StateLoad(m state.Source) {
	m.Load(0, &x.ep)
	m.Load(1, &x.rcvNxt)
	m.Load(2, &x.rcvAcc)
	m.Load(3, &x.rcvWnd)
	m.Load(4, &x.rcvWndScale)
	m.Load(5, &x.closed)
	m.Load(6, &x.pendingRcvdSegments)
	m.Load(7, &x.pendingBufUsed)
	m.Load(8, &x.pendingBufSize)
	m.LoadValue(9, new(unixTime), func(y interface{}) { x.loadLastRcvdAckTime(y.(unixTime)) })
}

func (x *renoState) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.renoState"
}

func (x *renoState) StateFields() []string {
	return []string{
		"s",
	}
}

func (x *renoState) beforeSave() {}

func (x *renoState) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.s)
}

func (x *renoState) afterLoad() {}

func (x *renoState) StateLoad(m state.Source) {
	m.Load(0, &x.s)
}

func (x *SACKScoreboard) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.SACKScoreboard"
}

func (x *SACKScoreboard) StateFields() []string {
	return []string{
		"smss",
		"maxSACKED",
	}
}

func (x *SACKScoreboard) beforeSave() {}

func (x *SACKScoreboard) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.smss)
	m.Save(1, &x.maxSACKED)
}

func (x *SACKScoreboard) afterLoad() {}

func (x *SACKScoreboard) StateLoad(m state.Source) {
	m.Load(0, &x.smss)
	m.Load(1, &x.maxSACKED)
}

func (x *segment) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.segment"
}

func (x *segment) StateFields() []string {
	return []string{
		"segmentEntry",
		"refCnt",
		"data",
		"hdr",
		"viewToDeliver",
		"sequenceNumber",
		"ackNumber",
		"flags",
		"window",
		"csum",
		"csumValid",
		"parsedOptions",
		"options",
		"hasNewSACKInfo",
		"rcvdTime",
		"xmitTime",
		"xmitCount",
	}
}

func (x *segment) beforeSave() {}

func (x *segment) StateSave(m state.Sink) {
	x.beforeSave()
	var data buffer.VectorisedView = x.saveData()
	m.SaveValue(2, data)
	var options []byte = x.saveOptions()
	m.SaveValue(12, options)
	var rcvdTime unixTime = x.saveRcvdTime()
	m.SaveValue(14, rcvdTime)
	var xmitTime unixTime = x.saveXmitTime()
	m.SaveValue(15, xmitTime)
	m.Save(0, &x.segmentEntry)
	m.Save(1, &x.refCnt)
	m.Save(3, &x.hdr)
	m.Save(4, &x.viewToDeliver)
	m.Save(5, &x.sequenceNumber)
	m.Save(6, &x.ackNumber)
	m.Save(7, &x.flags)
	m.Save(8, &x.window)
	m.Save(9, &x.csum)
	m.Save(10, &x.csumValid)
	m.Save(11, &x.parsedOptions)
	m.Save(13, &x.hasNewSACKInfo)
	m.Save(16, &x.xmitCount)
}

func (x *segment) afterLoad() {}

func (x *segment) StateLoad(m state.Source) {
	m.Load(0, &x.segmentEntry)
	m.Load(1, &x.refCnt)
	m.Load(3, &x.hdr)
	m.Load(4, &x.viewToDeliver)
	m.Load(5, &x.sequenceNumber)
	m.Load(6, &x.ackNumber)
	m.Load(7, &x.flags)
	m.Load(8, &x.window)
	m.Load(9, &x.csum)
	m.Load(10, &x.csumValid)
	m.Load(11, &x.parsedOptions)
	m.Load(13, &x.hasNewSACKInfo)
	m.Load(16, &x.xmitCount)
	m.LoadValue(2, new(buffer.VectorisedView), func(y interface{}) { x.loadData(y.(buffer.VectorisedView)) })
	m.LoadValue(12, new([]byte), func(y interface{}) { x.loadOptions(y.([]byte)) })
	m.LoadValue(14, new(unixTime), func(y interface{}) { x.loadRcvdTime(y.(unixTime)) })
	m.LoadValue(15, new(unixTime), func(y interface{}) { x.loadXmitTime(y.(unixTime)) })
}

func (x *segmentQueue) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.segmentQueue"
}

func (x *segmentQueue) StateFields() []string {
	return []string{
		"list",
		"limit",
		"used",
	}
}

func (x *segmentQueue) beforeSave() {}

func (x *segmentQueue) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.list)
	m.Save(1, &x.limit)
	m.Save(2, &x.used)
}

func (x *segmentQueue) afterLoad() {}

func (x *segmentQueue) StateLoad(m state.Source) {
	m.LoadWait(0, &x.list)
	m.Load(1, &x.limit)
	m.Load(2, &x.used)
}

func (x *sender) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.sender"
}

func (x *sender) StateFields() []string {
	return []string{
		"ep",
		"lastSendTime",
		"dupAckCount",
		"fr",
		"sndCwnd",
		"sndSsthresh",
		"sndCAAckCount",
		"outstanding",
		"sndWnd",
		"sndUna",
		"sndNxt",
		"rttMeasureSeqNum",
		"rttMeasureTime",
		"firstRetransmittedSegXmitTime",
		"closed",
		"writeNext",
		"writeList",
		"rtt",
		"rto",
		"minRTO",
		"maxRTO",
		"maxRetries",
		"maxPayloadSize",
		"gso",
		"sndWndScale",
		"maxSentAck",
		"state",
		"cc",
		"rc",
	}
}

func (x *sender) beforeSave() {}

func (x *sender) StateSave(m state.Sink) {
	x.beforeSave()
	var lastSendTime unixTime = x.saveLastSendTime()
	m.SaveValue(1, lastSendTime)
	var rttMeasureTime unixTime = x.saveRttMeasureTime()
	m.SaveValue(12, rttMeasureTime)
	var firstRetransmittedSegXmitTime unixTime = x.saveFirstRetransmittedSegXmitTime()
	m.SaveValue(13, firstRetransmittedSegXmitTime)
	m.Save(0, &x.ep)
	m.Save(2, &x.dupAckCount)
	m.Save(3, &x.fr)
	m.Save(4, &x.sndCwnd)
	m.Save(5, &x.sndSsthresh)
	m.Save(6, &x.sndCAAckCount)
	m.Save(7, &x.outstanding)
	m.Save(8, &x.sndWnd)
	m.Save(9, &x.sndUna)
	m.Save(10, &x.sndNxt)
	m.Save(11, &x.rttMeasureSeqNum)
	m.Save(14, &x.closed)
	m.Save(15, &x.writeNext)
	m.Save(16, &x.writeList)
	m.Save(17, &x.rtt)
	m.Save(18, &x.rto)
	m.Save(19, &x.minRTO)
	m.Save(20, &x.maxRTO)
	m.Save(21, &x.maxRetries)
	m.Save(22, &x.maxPayloadSize)
	m.Save(23, &x.gso)
	m.Save(24, &x.sndWndScale)
	m.Save(25, &x.maxSentAck)
	m.Save(26, &x.state)
	m.Save(27, &x.cc)
	m.Save(28, &x.rc)
}

func (x *sender) StateLoad(m state.Source) {
	m.Load(0, &x.ep)
	m.Load(2, &x.dupAckCount)
	m.Load(3, &x.fr)
	m.Load(4, &x.sndCwnd)
	m.Load(5, &x.sndSsthresh)
	m.Load(6, &x.sndCAAckCount)
	m.Load(7, &x.outstanding)
	m.Load(8, &x.sndWnd)
	m.Load(9, &x.sndUna)
	m.Load(10, &x.sndNxt)
	m.Load(11, &x.rttMeasureSeqNum)
	m.Load(14, &x.closed)
	m.Load(15, &x.writeNext)
	m.Load(16, &x.writeList)
	m.Load(17, &x.rtt)
	m.Load(18, &x.rto)
	m.Load(19, &x.minRTO)
	m.Load(20, &x.maxRTO)
	m.Load(21, &x.maxRetries)
	m.Load(22, &x.maxPayloadSize)
	m.Load(23, &x.gso)
	m.Load(24, &x.sndWndScale)
	m.Load(25, &x.maxSentAck)
	m.Load(26, &x.state)
	m.Load(27, &x.cc)
	m.Load(28, &x.rc)
	m.LoadValue(1, new(unixTime), func(y interface{}) { x.loadLastSendTime(y.(unixTime)) })
	m.LoadValue(12, new(unixTime), func(y interface{}) { x.loadRttMeasureTime(y.(unixTime)) })
	m.LoadValue(13, new(unixTime), func(y interface{}) { x.loadFirstRetransmittedSegXmitTime(y.(unixTime)) })
	m.AfterLoad(x.afterLoad)
}

func (x *rtt) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.rtt"
}

func (x *rtt) StateFields() []string {
	return []string{
		"srtt",
		"rttvar",
		"srttInited",
	}
}

func (x *rtt) beforeSave() {}

func (x *rtt) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.srtt)
	m.Save(1, &x.rttvar)
	m.Save(2, &x.srttInited)
}

func (x *rtt) afterLoad() {}

func (x *rtt) StateLoad(m state.Source) {
	m.Load(0, &x.srtt)
	m.Load(1, &x.rttvar)
	m.Load(2, &x.srttInited)
}

func (x *fastRecovery) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.fastRecovery"
}

func (x *fastRecovery) StateFields() []string {
	return []string{
		"active",
		"first",
		"last",
		"maxCwnd",
		"highRxt",
		"rescueRxt",
	}
}

func (x *fastRecovery) beforeSave() {}

func (x *fastRecovery) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.active)
	m.Save(1, &x.first)
	m.Save(2, &x.last)
	m.Save(3, &x.maxCwnd)
	m.Save(4, &x.highRxt)
	m.Save(5, &x.rescueRxt)
}

func (x *fastRecovery) afterLoad() {}

func (x *fastRecovery) StateLoad(m state.Source) {
	m.Load(0, &x.active)
	m.Load(1, &x.first)
	m.Load(2, &x.last)
	m.Load(3, &x.maxCwnd)
	m.Load(4, &x.highRxt)
	m.Load(5, &x.rescueRxt)
}

func (x *unixTime) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.unixTime"
}

func (x *unixTime) StateFields() []string {
	return []string{
		"second",
		"nano",
	}
}

func (x *unixTime) beforeSave() {}

func (x *unixTime) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.second)
	m.Save(1, &x.nano)
}

func (x *unixTime) afterLoad() {}

func (x *unixTime) StateLoad(m state.Source) {
	m.Load(0, &x.second)
	m.Load(1, &x.nano)
}

func (x *endpointList) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.endpointList"
}

func (x *endpointList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (x *endpointList) beforeSave() {}

func (x *endpointList) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.head)
	m.Save(1, &x.tail)
}

func (x *endpointList) afterLoad() {}

func (x *endpointList) StateLoad(m state.Source) {
	m.Load(0, &x.head)
	m.Load(1, &x.tail)
}

func (x *endpointEntry) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.endpointEntry"
}

func (x *endpointEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (x *endpointEntry) beforeSave() {}

func (x *endpointEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.next)
	m.Save(1, &x.prev)
}

func (x *endpointEntry) afterLoad() {}

func (x *endpointEntry) StateLoad(m state.Source) {
	m.Load(0, &x.next)
	m.Load(1, &x.prev)
}

func (x *segmentList) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.segmentList"
}

func (x *segmentList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (x *segmentList) beforeSave() {}

func (x *segmentList) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.head)
	m.Save(1, &x.tail)
}

func (x *segmentList) afterLoad() {}

func (x *segmentList) StateLoad(m state.Source) {
	m.Load(0, &x.head)
	m.Load(1, &x.tail)
}

func (x *segmentEntry) StateTypeName() string {
	return "pkg/tcpip/transport/tcp.segmentEntry"
}

func (x *segmentEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (x *segmentEntry) beforeSave() {}

func (x *segmentEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.next)
	m.Save(1, &x.prev)
}

func (x *segmentEntry) afterLoad() {}

func (x *segmentEntry) StateLoad(m state.Source) {
	m.Load(0, &x.next)
	m.Load(1, &x.prev)
}

func init() {
	state.Register((*cubicState)(nil))
	state.Register((*SACKInfo)(nil))
	state.Register((*rcvBufAutoTuneParams)(nil))
	state.Register((*EndpointInfo)(nil))
	state.Register((*endpoint)(nil))
	state.Register((*keepalive)(nil))
	state.Register((*rackControl)(nil))
	state.Register((*receiver)(nil))
	state.Register((*renoState)(nil))
	state.Register((*SACKScoreboard)(nil))
	state.Register((*segment)(nil))
	state.Register((*segmentQueue)(nil))
	state.Register((*sender)(nil))
	state.Register((*rtt)(nil))
	state.Register((*fastRecovery)(nil))
	state.Register((*unixTime)(nil))
	state.Register((*endpointList)(nil))
	state.Register((*endpointEntry)(nil))
	state.Register((*segmentList)(nil))
	state.Register((*segmentEntry)(nil))
}
