// automatically generated by stateify.

package fragmentation

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *reassemblerList) StateTypeName() string {
	return "pkg/tcpip/network/fragmentation.reassemblerList"
}

func (x *reassemblerList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (x *reassemblerList) beforeSave() {}

func (x *reassemblerList) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.head)
	m.Save(1, &x.tail)
}

func (x *reassemblerList) afterLoad() {}

func (x *reassemblerList) StateLoad(m state.Source) {
	m.Load(0, &x.head)
	m.Load(1, &x.tail)
}

func (x *reassemblerEntry) StateTypeName() string {
	return "pkg/tcpip/network/fragmentation.reassemblerEntry"
}

func (x *reassemblerEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (x *reassemblerEntry) beforeSave() {}

func (x *reassemblerEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.next)
	m.Save(1, &x.prev)
}

func (x *reassemblerEntry) afterLoad() {}

func (x *reassemblerEntry) StateLoad(m state.Source) {
	m.Load(0, &x.next)
	m.Load(1, &x.prev)
}

func init() {
	state.Register((*reassemblerList)(nil))
	state.Register((*reassemblerEntry)(nil))
}
